2024-07-17 15:27:35,131:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 15:27:35,131:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 15:27:35,131:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 15:27:35,131:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 15:33:26,245:INFO:PyCaret ClassificationExperiment
2024-07-17 15:33:26,245:INFO:Logging name: clf-default-name
2024-07-17 15:33:26,267:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-07-17 15:33:26,267:INFO:version 3.3.2
2024-07-17 15:33:26,267:INFO:Initializing setup()
2024-07-17 15:33:26,267:INFO:self.USI: eacf
2024-07-17 15:33:26,268:INFO:self._variable_keys: {'gpu_param', 'memory', 'exp_name_log', 'y_test', 'exp_id', 'seed', 'pipeline', 'fold_groups_param', 'fold_shuffle_param', 'idx', 'y_train', '_available_plots', 'log_plots_param', 'html_param', 'USI', '_ml_usecase', 'is_multiclass', 'target_param', 'X_train', 'logging_param', 'fix_imbalance', 'data', 'X_test', 'fold_generator', 'gpu_n_jobs_param', 'y', 'n_jobs_param', 'X'}
2024-07-17 15:33:26,268:INFO:Checking environment
2024-07-17 15:33:26,268:INFO:python_version: 3.11.7
2024-07-17 15:33:26,268:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-07-17 15:33:26,268:INFO:machine: AMD64
2024-07-17 15:33:26,268:INFO:platform: Windows-10-10.0.19045-SP0
2024-07-17 15:33:26,269:INFO:Memory: svmem(total=17064296448, available=7325667328, percent=57.1, used=9738629120, free=7325667328)
2024-07-17 15:33:26,269:INFO:Physical Core: 4
2024-07-17 15:33:26,269:INFO:Logical Core: 8
2024-07-17 15:33:26,269:INFO:Checking libraries
2024-07-17 15:33:26,269:INFO:System:
2024-07-17 15:33:26,269:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-07-17 15:33:26,270:INFO:executable: C:\Users\MTIDES\anaconda3\python.exe
2024-07-17 15:33:26,270:INFO:   machine: Windows-10-10.0.19045-SP0
2024-07-17 15:33:26,270:INFO:PyCaret required dependencies:
2024-07-17 15:33:27,564:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:30,527:INFO:                 pip: 23.2.1
2024-07-17 15:33:30,528:INFO:          setuptools: 68.2.2
2024-07-17 15:33:30,528:INFO:             pycaret: 3.3.2
2024-07-17 15:33:30,528:INFO:             IPython: 8.20.0
2024-07-17 15:33:30,528:INFO:          ipywidgets: 8.0.4
2024-07-17 15:33:30,528:INFO:                tqdm: 4.65.0
2024-07-17 15:33:30,528:INFO:               numpy: 1.24.3
2024-07-17 15:33:30,528:INFO:              pandas: 2.1.4
2024-07-17 15:33:30,528:INFO:              jinja2: 3.1.2
2024-07-17 15:33:30,528:INFO:               scipy: 1.11.4
2024-07-17 15:33:30,528:INFO:              joblib: 1.3.2
2024-07-17 15:33:30,528:INFO:             sklearn: 1.4.2
2024-07-17 15:33:30,528:INFO:                pyod: 2.0.1
2024-07-17 15:33:30,528:INFO:            imblearn: 0.11.0
2024-07-17 15:33:30,528:INFO:   category_encoders: 2.6.3
2024-07-17 15:33:30,528:INFO:            lightgbm: 4.4.0
2024-07-17 15:33:30,529:INFO:               numba: 0.58.1
2024-07-17 15:33:30,529:INFO:            requests: 2.31.0
2024-07-17 15:33:30,529:INFO:          matplotlib: 3.8.0
2024-07-17 15:33:30,529:INFO:          scikitplot: 0.3.7
2024-07-17 15:33:30,529:INFO:         yellowbrick: 1.5
2024-07-17 15:33:30,529:INFO:              plotly: 5.22.0
2024-07-17 15:33:30,529:INFO:    plotly-resampler: Not installed
2024-07-17 15:33:30,529:INFO:             kaleido: 0.2.1
2024-07-17 15:33:30,529:INFO:           schemdraw: 0.15
2024-07-17 15:33:30,529:INFO:         statsmodels: 0.14.0
2024-07-17 15:33:30,529:INFO:              sktime: 0.26.0
2024-07-17 15:33:30,529:INFO:               tbats: 1.1.3
2024-07-17 15:33:30,529:INFO:            pmdarima: 2.0.4
2024-07-17 15:33:30,529:INFO:              psutil: 5.9.0
2024-07-17 15:33:30,529:INFO:          markupsafe: 2.1.3
2024-07-17 15:33:30,529:INFO:             pickle5: Not installed
2024-07-17 15:33:30,529:INFO:         cloudpickle: 2.2.1
2024-07-17 15:33:30,530:INFO:         deprecation: 2.1.0
2024-07-17 15:33:30,530:INFO:              xxhash: 2.0.2
2024-07-17 15:33:30,530:INFO:           wurlitzer: Not installed
2024-07-17 15:33:30,530:INFO:PyCaret optional dependencies:
2024-07-17 15:33:30,556:INFO:                shap: Not installed
2024-07-17 15:33:30,556:INFO:           interpret: Not installed
2024-07-17 15:33:30,556:INFO:                umap: Not installed
2024-07-17 15:33:30,556:INFO:     ydata_profiling: 4.6.4
2024-07-17 15:33:30,556:INFO:  explainerdashboard: Not installed
2024-07-17 15:33:30,556:INFO:             autoviz: Not installed
2024-07-17 15:33:30,556:INFO:           fairlearn: Not installed
2024-07-17 15:33:30,556:INFO:          deepchecks: Not installed
2024-07-17 15:33:30,556:INFO:             xgboost: Not installed
2024-07-17 15:33:30,556:INFO:            catboost: 1.2.5
2024-07-17 15:33:30,556:INFO:              kmodes: Not installed
2024-07-17 15:33:30,556:INFO:             mlxtend: Not installed
2024-07-17 15:33:30,556:INFO:       statsforecast: Not installed
2024-07-17 15:33:30,557:INFO:        tune_sklearn: Not installed
2024-07-17 15:33:30,557:INFO:                 ray: Not installed
2024-07-17 15:33:30,557:INFO:            hyperopt: Not installed
2024-07-17 15:33:30,557:INFO:              optuna: Not installed
2024-07-17 15:33:30,557:INFO:               skopt: Not installed
2024-07-17 15:33:30,557:INFO:              mlflow: Not installed
2024-07-17 15:33:30,557:INFO:              gradio: Not installed
2024-07-17 15:33:30,557:INFO:             fastapi: Not installed
2024-07-17 15:33:30,557:INFO:             uvicorn: Not installed
2024-07-17 15:33:30,557:INFO:              m2cgen: Not installed
2024-07-17 15:33:30,557:INFO:           evidently: Not installed
2024-07-17 15:33:30,557:INFO:               fugue: Not installed
2024-07-17 15:33:30,557:INFO:           streamlit: Not installed
2024-07-17 15:33:30,557:INFO:             prophet: Not installed
2024-07-17 15:33:30,557:INFO:None
2024-07-17 15:33:30,558:INFO:Set up data.
2024-07-17 15:33:30,573:INFO:Set up folding strategy.
2024-07-17 15:33:30,573:INFO:Set up train/test split.
2024-07-17 15:33:31,101:INFO:Set up index.
2024-07-17 15:33:31,101:INFO:Assigning column types.
2024-07-17 15:33:31,114:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-07-17 15:33:31,173:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-17 15:33:31,177:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 15:33:31,221:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:31,222:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:35,231:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-17 15:33:35,232:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 15:33:35,269:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:35,269:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:35,270:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-07-17 15:33:35,330:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 15:33:35,366:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:35,367:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:35,429:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 15:33:35,466:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:35,466:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:35,467:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-07-17 15:33:35,559:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:35,559:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:35,653:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:35,654:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:35,658:INFO:Preparing preprocessing pipeline...
2024-07-17 15:33:35,729:INFO:Set up label encoding.
2024-07-17 15:33:35,729:INFO:Set up simple imputation.
2024-07-17 15:33:35,791:INFO:Finished creating preprocessing pipeline.
2024-07-17 15:33:35,798:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\MTIDES\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['student_count',
                                             'awards_per_state_value',
                                             'awards_per_natl_value',
                                             'exp_award_value',
                                             'exp_award_state...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-07-17 15:33:35,798:INFO:Creating final display dataframe.
2024-07-17 15:33:36,006:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target  num_awards_given
2                   Target type            Binary
3                Target mapping   High: 0, Low: 1
4           Original data shape        (3798, 40)
5        Transformed data shape        (3798, 40)
6   Transformed train set shape        (2658, 40)
7    Transformed test set shape        (1140, 40)
8              Numeric features                39
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              eacf
2024-07-17 15:33:36,126:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:36,126:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:36,218:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 15:33:36,218:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 15:33:36,220:INFO:setup() successfully completed in 10.07s...............
2024-07-17 15:33:36,221:INFO:Initializing compare_models()
2024-07-17 15:33:36,221:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-07-17 15:33:36,221:INFO:Checking exceptions
2024-07-17 15:33:36,230:INFO:Preparing display monitor
2024-07-17 15:33:36,272:INFO:Initializing Logistic Regression
2024-07-17 15:33:36,273:INFO:Total runtime is 1.630385716756185e-05 minutes
2024-07-17 15:33:36,281:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:36,282:INFO:Initializing create_model()
2024-07-17 15:33:36,282:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:36,282:INFO:Checking exceptions
2024-07-17 15:33:36,283:INFO:Importing libraries
2024-07-17 15:33:36,283:INFO:Copying training dataset
2024-07-17 15:33:36,308:INFO:Defining folds
2024-07-17 15:33:36,309:INFO:Declaring metric variables
2024-07-17 15:33:36,313:INFO:Importing untrained model
2024-07-17 15:33:36,317:INFO:Logistic Regression Imported successfully
2024-07-17 15:33:36,328:INFO:Starting cross validation
2024-07-17 15:33:36,329:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:42,953:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:42,954:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:42,980:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:43,014:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:43,041:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:43,103:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:43,140:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:43,304:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 15:33:45,088:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,118:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,122:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,125:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,133:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,142:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,149:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,157:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,159:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,167:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,170:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,176:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,221:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,280:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,283:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,301:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,312:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,314:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,321:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,321:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,322:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,326:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,331:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,336:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,341:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,354:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,365:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,376:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,453:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,476:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,484:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,488:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,767:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,782:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,787:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,792:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,848:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 15:33:45,893:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,908:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,923:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:45,949:INFO:Calculating mean and std
2024-07-17 15:33:45,951:INFO:Creating metrics dataframe
2024-07-17 15:33:45,953:INFO:Uploading results into container
2024-07-17 15:33:45,953:INFO:Uploading model into container now
2024-07-17 15:33:45,954:INFO:_master_model_container: 1
2024-07-17 15:33:45,954:INFO:_display_container: 2
2024-07-17 15:33:45,954:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-17 15:33:45,955:INFO:create_model() successfully completed......................................
2024-07-17 15:33:46,074:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:46,074:INFO:Creating metrics dataframe
2024-07-17 15:33:46,083:INFO:Initializing K Neighbors Classifier
2024-07-17 15:33:46,083:INFO:Total runtime is 0.16351500749588013 minutes
2024-07-17 15:33:46,088:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:46,088:INFO:Initializing create_model()
2024-07-17 15:33:46,088:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:46,088:INFO:Checking exceptions
2024-07-17 15:33:46,089:INFO:Importing libraries
2024-07-17 15:33:46,089:INFO:Copying training dataset
2024-07-17 15:33:46,106:INFO:Defining folds
2024-07-17 15:33:46,107:INFO:Declaring metric variables
2024-07-17 15:33:46,111:INFO:Importing untrained model
2024-07-17 15:33:46,117:INFO:K Neighbors Classifier Imported successfully
2024-07-17 15:33:46,127:INFO:Starting cross validation
2024-07-17 15:33:46,131:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:46,884:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,887:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,891:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,894:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,896:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,902:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,904:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,905:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,911:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,912:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,917:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,920:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,924:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,927:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,929:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,933:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,935:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,939:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,943:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,951:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,952:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,960:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:46,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,277:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,303:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,304:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,312:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,315:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,321:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,362:INFO:Calculating mean and std
2024-07-17 15:33:47,365:INFO:Creating metrics dataframe
2024-07-17 15:33:47,369:INFO:Uploading results into container
2024-07-17 15:33:47,370:INFO:Uploading model into container now
2024-07-17 15:33:47,371:INFO:_master_model_container: 2
2024-07-17 15:33:47,371:INFO:_display_container: 2
2024-07-17 15:33:47,371:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-07-17 15:33:47,372:INFO:create_model() successfully completed......................................
2024-07-17 15:33:47,491:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:47,492:INFO:Creating metrics dataframe
2024-07-17 15:33:47,502:INFO:Initializing Naive Bayes
2024-07-17 15:33:47,502:INFO:Total runtime is 0.1871665875116984 minutes
2024-07-17 15:33:47,506:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:47,507:INFO:Initializing create_model()
2024-07-17 15:33:47,507:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:47,507:INFO:Checking exceptions
2024-07-17 15:33:47,507:INFO:Importing libraries
2024-07-17 15:33:47,507:INFO:Copying training dataset
2024-07-17 15:33:47,533:INFO:Defining folds
2024-07-17 15:33:47,533:INFO:Declaring metric variables
2024-07-17 15:33:47,541:INFO:Importing untrained model
2024-07-17 15:33:47,555:INFO:Naive Bayes Imported successfully
2024-07-17 15:33:47,578:INFO:Starting cross validation
2024-07-17 15:33:47,580:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:47,678:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,679:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,688:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,692:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,697:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,698:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,701:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,705:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,708:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,710:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,713:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,717:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,719:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,720:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,723:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,724:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,729:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,733:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,734:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,740:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,743:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,750:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,756:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,770:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,781:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,784:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,790:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,793:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,802:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:47,819:INFO:Calculating mean and std
2024-07-17 15:33:47,821:INFO:Creating metrics dataframe
2024-07-17 15:33:47,823:INFO:Uploading results into container
2024-07-17 15:33:47,824:INFO:Uploading model into container now
2024-07-17 15:33:47,824:INFO:_master_model_container: 3
2024-07-17 15:33:47,824:INFO:_display_container: 2
2024-07-17 15:33:47,825:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-07-17 15:33:47,825:INFO:create_model() successfully completed......................................
2024-07-17 15:33:47,939:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:47,939:INFO:Creating metrics dataframe
2024-07-17 15:33:47,952:INFO:Initializing Decision Tree Classifier
2024-07-17 15:33:47,952:INFO:Total runtime is 0.1946659286816915 minutes
2024-07-17 15:33:47,959:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:47,960:INFO:Initializing create_model()
2024-07-17 15:33:47,960:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:47,960:INFO:Checking exceptions
2024-07-17 15:33:47,961:INFO:Importing libraries
2024-07-17 15:33:47,961:INFO:Copying training dataset
2024-07-17 15:33:47,986:INFO:Defining folds
2024-07-17 15:33:47,986:INFO:Declaring metric variables
2024-07-17 15:33:47,991:INFO:Importing untrained model
2024-07-17 15:33:47,998:INFO:Decision Tree Classifier Imported successfully
2024-07-17 15:33:48,014:INFO:Starting cross validation
2024-07-17 15:33:48,016:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:48,196:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,206:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,214:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,214:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,217:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,218:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,223:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,223:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,227:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,229:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,229:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,231:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,233:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,233:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,236:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,241:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,241:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,241:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,250:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,253:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,322:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,330:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,337:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,360:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,367:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,372:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,398:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,403:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,409:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,429:INFO:Calculating mean and std
2024-07-17 15:33:48,431:INFO:Creating metrics dataframe
2024-07-17 15:33:48,433:INFO:Uploading results into container
2024-07-17 15:33:48,434:INFO:Uploading model into container now
2024-07-17 15:33:48,435:INFO:_master_model_container: 4
2024-07-17 15:33:48,435:INFO:_display_container: 2
2024-07-17 15:33:48,435:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-07-17 15:33:48,435:INFO:create_model() successfully completed......................................
2024-07-17 15:33:48,564:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:48,564:INFO:Creating metrics dataframe
2024-07-17 15:33:48,580:INFO:Initializing SVM - Linear Kernel
2024-07-17 15:33:48,581:INFO:Total runtime is 0.20515536467234294 minutes
2024-07-17 15:33:48,587:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:48,587:INFO:Initializing create_model()
2024-07-17 15:33:48,587:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:48,588:INFO:Checking exceptions
2024-07-17 15:33:48,588:INFO:Importing libraries
2024-07-17 15:33:48,588:INFO:Copying training dataset
2024-07-17 15:33:48,610:INFO:Defining folds
2024-07-17 15:33:48,611:INFO:Declaring metric variables
2024-07-17 15:33:48,620:INFO:Importing untrained model
2024-07-17 15:33:48,626:INFO:SVM - Linear Kernel Imported successfully
2024-07-17 15:33:48,635:INFO:Starting cross validation
2024-07-17 15:33:48,637:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:48,785:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,795:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,804:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,805:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,814:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,814:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,813:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,823:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,824:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,825:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,833:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,838:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,848:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,851:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,854:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,857:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,860:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,864:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,866:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,870:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,873:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,881:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,890:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,897:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,921:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,927:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,933:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,948:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,953:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,958:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:48,970:INFO:Calculating mean and std
2024-07-17 15:33:48,975:INFO:Creating metrics dataframe
2024-07-17 15:33:48,977:INFO:Uploading results into container
2024-07-17 15:33:48,978:INFO:Uploading model into container now
2024-07-17 15:33:48,978:INFO:_master_model_container: 5
2024-07-17 15:33:48,978:INFO:_display_container: 2
2024-07-17 15:33:48,978:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-17 15:33:48,978:INFO:create_model() successfully completed......................................
2024-07-17 15:33:49,092:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:49,093:INFO:Creating metrics dataframe
2024-07-17 15:33:49,119:INFO:Initializing Ridge Classifier
2024-07-17 15:33:49,119:INFO:Total runtime is 0.2141245404879252 minutes
2024-07-17 15:33:49,124:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:49,125:INFO:Initializing create_model()
2024-07-17 15:33:49,125:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:49,126:INFO:Checking exceptions
2024-07-17 15:33:49,126:INFO:Importing libraries
2024-07-17 15:33:49,126:INFO:Copying training dataset
2024-07-17 15:33:49,182:INFO:Defining folds
2024-07-17 15:33:49,182:INFO:Declaring metric variables
2024-07-17 15:33:49,188:INFO:Importing untrained model
2024-07-17 15:33:49,194:INFO:Ridge Classifier Imported successfully
2024-07-17 15:33:49,205:INFO:Starting cross validation
2024-07-17 15:33:49,207:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:49,593:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,593:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,593:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,593:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,595:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,596:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,598:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,602:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,603:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,603:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,603:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,605:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,606:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,609:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,611:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,612:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,612:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,612:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,614:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,616:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,630:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,630:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,639:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,653:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,672:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,677:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,680:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,685:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,687:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,690:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:49,703:INFO:Calculating mean and std
2024-07-17 15:33:49,705:INFO:Creating metrics dataframe
2024-07-17 15:33:49,707:INFO:Uploading results into container
2024-07-17 15:33:49,708:INFO:Uploading model into container now
2024-07-17 15:33:49,708:INFO:_master_model_container: 6
2024-07-17 15:33:49,709:INFO:_display_container: 2
2024-07-17 15:33:49,709:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-07-17 15:33:49,710:INFO:create_model() successfully completed......................................
2024-07-17 15:33:49,849:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:49,850:INFO:Creating metrics dataframe
2024-07-17 15:33:49,867:INFO:Initializing Random Forest Classifier
2024-07-17 15:33:49,868:INFO:Total runtime is 0.22658832073211668 minutes
2024-07-17 15:33:49,873:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:49,874:INFO:Initializing create_model()
2024-07-17 15:33:49,875:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:49,875:INFO:Checking exceptions
2024-07-17 15:33:49,875:INFO:Importing libraries
2024-07-17 15:33:49,875:INFO:Copying training dataset
2024-07-17 15:33:49,895:INFO:Defining folds
2024-07-17 15:33:49,895:INFO:Declaring metric variables
2024-07-17 15:33:49,903:INFO:Importing untrained model
2024-07-17 15:33:49,914:INFO:Random Forest Classifier Imported successfully
2024-07-17 15:33:49,929:INFO:Starting cross validation
2024-07-17 15:33:49,931:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:51,647:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,648:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,650:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,655:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,655:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,659:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,662:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,663:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,667:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,675:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,684:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,692:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,705:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,714:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,723:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,738:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,739:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,745:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,746:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,752:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,753:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,767:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,772:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:51,776:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,196:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,200:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,204:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,208:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,212:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,216:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,234:INFO:Calculating mean and std
2024-07-17 15:33:52,235:INFO:Creating metrics dataframe
2024-07-17 15:33:52,237:INFO:Uploading results into container
2024-07-17 15:33:52,237:INFO:Uploading model into container now
2024-07-17 15:33:52,238:INFO:_master_model_container: 7
2024-07-17 15:33:52,238:INFO:_display_container: 2
2024-07-17 15:33:52,238:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-07-17 15:33:52,239:INFO:create_model() successfully completed......................................
2024-07-17 15:33:52,344:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:52,344:INFO:Creating metrics dataframe
2024-07-17 15:33:52,354:INFO:Initializing Quadratic Discriminant Analysis
2024-07-17 15:33:52,355:INFO:Total runtime is 0.2680573980013529 minutes
2024-07-17 15:33:52,363:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:52,364:INFO:Initializing create_model()
2024-07-17 15:33:52,364:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:52,364:INFO:Checking exceptions
2024-07-17 15:33:52,364:INFO:Importing libraries
2024-07-17 15:33:52,365:INFO:Copying training dataset
2024-07-17 15:33:52,382:INFO:Defining folds
2024-07-17 15:33:52,383:INFO:Declaring metric variables
2024-07-17 15:33:52,392:INFO:Importing untrained model
2024-07-17 15:33:52,399:INFO:Quadratic Discriminant Analysis Imported successfully
2024-07-17 15:33:52,407:INFO:Starting cross validation
2024-07-17 15:33:52,410:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:52,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,733:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,734:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,735:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,735:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,736:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,737:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,740:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,742:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,743:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,744:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,747:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,747:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,748:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,748:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,748:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,750:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,750:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,753:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,754:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,761:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,762:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,780:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,793:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,794:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 15:33:52,797:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,801:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,826:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,834:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,843:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:52,864:INFO:Calculating mean and std
2024-07-17 15:33:52,865:INFO:Creating metrics dataframe
2024-07-17 15:33:52,868:INFO:Uploading results into container
2024-07-17 15:33:52,868:INFO:Uploading model into container now
2024-07-17 15:33:52,869:INFO:_master_model_container: 8
2024-07-17 15:33:52,869:INFO:_display_container: 2
2024-07-17 15:33:52,869:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-07-17 15:33:52,869:INFO:create_model() successfully completed......................................
2024-07-17 15:33:52,997:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:52,998:INFO:Creating metrics dataframe
2024-07-17 15:33:53,012:INFO:Initializing Ada Boost Classifier
2024-07-17 15:33:53,013:INFO:Total runtime is 0.27902557452519733 minutes
2024-07-17 15:33:53,018:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:53,018:INFO:Initializing create_model()
2024-07-17 15:33:53,018:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:53,018:INFO:Checking exceptions
2024-07-17 15:33:53,018:INFO:Importing libraries
2024-07-17 15:33:53,018:INFO:Copying training dataset
2024-07-17 15:33:53,034:INFO:Defining folds
2024-07-17 15:33:53,035:INFO:Declaring metric variables
2024-07-17 15:33:53,040:INFO:Importing untrained model
2024-07-17 15:33:53,045:INFO:Ada Boost Classifier Imported successfully
2024-07-17 15:33:53,054:INFO:Starting cross validation
2024-07-17 15:33:53,057:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:53,102:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,102:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,110:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,115:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,117:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,126:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,127:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,136:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,728:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,733:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,735:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,740:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,743:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,746:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,749:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,753:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,756:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,757:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,767:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,788:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,797:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,801:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,804:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,825:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 15:33:53,828:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,834:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,836:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,839:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,844:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,845:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,882:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,886:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:53,891:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:54,177:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:54,181:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:54,185:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:54,200:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:54,205:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:54,210:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:54,228:INFO:Calculating mean and std
2024-07-17 15:33:54,231:INFO:Creating metrics dataframe
2024-07-17 15:33:54,233:INFO:Uploading results into container
2024-07-17 15:33:54,233:INFO:Uploading model into container now
2024-07-17 15:33:54,234:INFO:_master_model_container: 9
2024-07-17 15:33:54,234:INFO:_display_container: 2
2024-07-17 15:33:54,235:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-07-17 15:33:54,235:INFO:create_model() successfully completed......................................
2024-07-17 15:33:54,412:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:54,413:INFO:Creating metrics dataframe
2024-07-17 15:33:54,422:INFO:Initializing Gradient Boosting Classifier
2024-07-17 15:33:54,423:INFO:Total runtime is 0.30250632762908936 minutes
2024-07-17 15:33:54,427:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:54,428:INFO:Initializing create_model()
2024-07-17 15:33:54,428:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:54,428:INFO:Checking exceptions
2024-07-17 15:33:54,428:INFO:Importing libraries
2024-07-17 15:33:54,429:INFO:Copying training dataset
2024-07-17 15:33:54,446:INFO:Defining folds
2024-07-17 15:33:54,447:INFO:Declaring metric variables
2024-07-17 15:33:54,451:INFO:Importing untrained model
2024-07-17 15:33:54,456:INFO:Gradient Boosting Classifier Imported successfully
2024-07-17 15:33:54,465:INFO:Starting cross validation
2024-07-17 15:33:54,466:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:56,480:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,488:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,499:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,502:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,512:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,513:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,520:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,521:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,531:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,561:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,568:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,575:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,681:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,688:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,696:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,798:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,800:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,806:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,807:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,813:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,813:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,815:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,819:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:56,826:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:57,874:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:57,878:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:57,882:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,020:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,024:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,029:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,043:INFO:Calculating mean and std
2024-07-17 15:33:58,045:INFO:Creating metrics dataframe
2024-07-17 15:33:58,048:INFO:Uploading results into container
2024-07-17 15:33:58,049:INFO:Uploading model into container now
2024-07-17 15:33:58,049:INFO:_master_model_container: 10
2024-07-17 15:33:58,049:INFO:_display_container: 2
2024-07-17 15:33:58,050:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-07-17 15:33:58,050:INFO:create_model() successfully completed......................................
2024-07-17 15:33:58,163:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:58,164:INFO:Creating metrics dataframe
2024-07-17 15:33:58,175:INFO:Initializing Linear Discriminant Analysis
2024-07-17 15:33:58,175:INFO:Total runtime is 0.36505709489186605 minutes
2024-07-17 15:33:58,179:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:58,180:INFO:Initializing create_model()
2024-07-17 15:33:58,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:58,181:INFO:Checking exceptions
2024-07-17 15:33:58,181:INFO:Importing libraries
2024-07-17 15:33:58,181:INFO:Copying training dataset
2024-07-17 15:33:58,211:INFO:Defining folds
2024-07-17 15:33:58,211:INFO:Declaring metric variables
2024-07-17 15:33:58,216:INFO:Importing untrained model
2024-07-17 15:33:58,222:INFO:Linear Discriminant Analysis Imported successfully
2024-07-17 15:33:58,230:INFO:Starting cross validation
2024-07-17 15:33:58,232:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:58,353:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,353:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,353:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,354:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,356:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,357:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,358:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,359:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,359:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,361:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,361:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,364:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,365:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,365:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,366:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,366:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,367:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,371:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,372:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,372:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,379:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,386:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,392:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,426:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,430:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,430:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,434:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,434:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,438:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:58,450:INFO:Calculating mean and std
2024-07-17 15:33:58,451:INFO:Creating metrics dataframe
2024-07-17 15:33:58,453:INFO:Uploading results into container
2024-07-17 15:33:58,453:INFO:Uploading model into container now
2024-07-17 15:33:58,454:INFO:_master_model_container: 11
2024-07-17 15:33:58,454:INFO:_display_container: 2
2024-07-17 15:33:58,455:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-07-17 15:33:58,455:INFO:create_model() successfully completed......................................
2024-07-17 15:33:58,672:INFO:SubProcess create_model() end ==================================
2024-07-17 15:33:58,673:INFO:Creating metrics dataframe
2024-07-17 15:33:58,685:INFO:Initializing Extra Trees Classifier
2024-07-17 15:33:58,685:INFO:Total runtime is 0.3735556523005168 minutes
2024-07-17 15:33:58,689:INFO:SubProcess create_model() called ==================================
2024-07-17 15:33:58,690:INFO:Initializing create_model()
2024-07-17 15:33:58,690:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:33:58,690:INFO:Checking exceptions
2024-07-17 15:33:58,690:INFO:Importing libraries
2024-07-17 15:33:58,690:INFO:Copying training dataset
2024-07-17 15:33:58,712:INFO:Defining folds
2024-07-17 15:33:58,713:INFO:Declaring metric variables
2024-07-17 15:33:58,716:INFO:Importing untrained model
2024-07-17 15:33:58,722:INFO:Extra Trees Classifier Imported successfully
2024-07-17 15:33:58,732:INFO:Starting cross validation
2024-07-17 15:33:58,733:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:33:59,714:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,716:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,734:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,738:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,744:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,753:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,754:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,755:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,755:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,762:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,765:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,766:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,768:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,774:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,777:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,778:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,785:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,787:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,790:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,795:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,799:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,803:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,807:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:33:59,815:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:00,136:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:00,140:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:00,145:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:00,153:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:00,157:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:00,161:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:00,173:INFO:Calculating mean and std
2024-07-17 15:34:00,174:INFO:Creating metrics dataframe
2024-07-17 15:34:00,176:INFO:Uploading results into container
2024-07-17 15:34:00,176:INFO:Uploading model into container now
2024-07-17 15:34:00,177:INFO:_master_model_container: 12
2024-07-17 15:34:00,177:INFO:_display_container: 2
2024-07-17 15:34:00,178:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-07-17 15:34:00,178:INFO:create_model() successfully completed......................................
2024-07-17 15:34:00,285:INFO:SubProcess create_model() end ==================================
2024-07-17 15:34:00,286:INFO:Creating metrics dataframe
2024-07-17 15:34:00,298:INFO:Initializing Light Gradient Boosting Machine
2024-07-17 15:34:00,298:INFO:Total runtime is 0.40044633944829305 minutes
2024-07-17 15:34:00,304:INFO:SubProcess create_model() called ==================================
2024-07-17 15:34:00,305:INFO:Initializing create_model()
2024-07-17 15:34:00,305:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:34:00,305:INFO:Checking exceptions
2024-07-17 15:34:00,305:INFO:Importing libraries
2024-07-17 15:34:00,305:INFO:Copying training dataset
2024-07-17 15:34:00,323:INFO:Defining folds
2024-07-17 15:34:00,323:INFO:Declaring metric variables
2024-07-17 15:34:00,328:INFO:Importing untrained model
2024-07-17 15:34:00,333:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-17 15:34:00,342:INFO:Starting cross validation
2024-07-17 15:34:00,344:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:34:01,662:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,670:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,679:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,687:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,695:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,719:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,729:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,737:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,769:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,778:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,785:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,795:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,802:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,810:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,812:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,820:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,828:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,873:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,881:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,882:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,888:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,889:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:01,897:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:02,265:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:02,265:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:02,271:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:02,272:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:02,281:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:02,281:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:02,298:INFO:Calculating mean and std
2024-07-17 15:34:02,300:INFO:Creating metrics dataframe
2024-07-17 15:34:02,304:INFO:Uploading results into container
2024-07-17 15:34:02,305:INFO:Uploading model into container now
2024-07-17 15:34:02,306:INFO:_master_model_container: 13
2024-07-17 15:34:02,306:INFO:_display_container: 2
2024-07-17 15:34:02,307:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-07-17 15:34:02,307:INFO:create_model() successfully completed......................................
2024-07-17 15:34:02,433:INFO:SubProcess create_model() end ==================================
2024-07-17 15:34:02,433:INFO:Creating metrics dataframe
2024-07-17 15:34:02,444:INFO:Initializing CatBoost Classifier
2024-07-17 15:34:02,444:INFO:Total runtime is 0.4362117330233256 minutes
2024-07-17 15:34:02,448:INFO:SubProcess create_model() called ==================================
2024-07-17 15:34:02,448:INFO:Initializing create_model()
2024-07-17 15:34:02,448:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:34:02,448:INFO:Checking exceptions
2024-07-17 15:34:02,448:INFO:Importing libraries
2024-07-17 15:34:02,448:INFO:Copying training dataset
2024-07-17 15:34:02,468:INFO:Defining folds
2024-07-17 15:34:02,468:INFO:Declaring metric variables
2024-07-17 15:34:02,476:INFO:Importing untrained model
2024-07-17 15:34:02,483:INFO:CatBoost Classifier Imported successfully
2024-07-17 15:34:02,494:INFO:Starting cross validation
2024-07-17 15:34:02,496:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:34:25,557:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:25,566:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:25,572:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:26,448:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:26,455:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:26,462:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:26,845:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:26,859:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:26,869:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,101:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,108:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,117:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,595:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,602:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,605:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,612:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,613:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,673:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,677:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,682:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,686:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,689:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:27,698:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:36,764:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:36,798:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:36,844:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:38,323:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:38,340:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:38,388:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:38,425:INFO:Calculating mean and std
2024-07-17 15:34:38,430:INFO:Creating metrics dataframe
2024-07-17 15:34:38,438:INFO:Uploading results into container
2024-07-17 15:34:38,440:INFO:Uploading model into container now
2024-07-17 15:34:38,443:INFO:_master_model_container: 14
2024-07-17 15:34:38,444:INFO:_display_container: 2
2024-07-17 15:34:38,445:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F76C18850>
2024-07-17 15:34:38,445:INFO:create_model() successfully completed......................................
2024-07-17 15:34:38,748:INFO:SubProcess create_model() end ==================================
2024-07-17 15:34:38,749:INFO:Creating metrics dataframe
2024-07-17 15:34:38,809:INFO:Initializing Dummy Classifier
2024-07-17 15:34:38,811:INFO:Total runtime is 1.0423028190930683 minutes
2024-07-17 15:34:38,846:INFO:SubProcess create_model() called ==================================
2024-07-17 15:34:38,848:INFO:Initializing create_model()
2024-07-17 15:34:38,848:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76CD3050>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:34:38,849:INFO:Checking exceptions
2024-07-17 15:34:38,849:INFO:Importing libraries
2024-07-17 15:34:38,850:INFO:Copying training dataset
2024-07-17 15:34:38,912:INFO:Defining folds
2024-07-17 15:34:38,913:INFO:Declaring metric variables
2024-07-17 15:34:38,937:INFO:Importing untrained model
2024-07-17 15:34:38,958:INFO:Dummy Classifier Imported successfully
2024-07-17 15:34:38,987:INFO:Starting cross validation
2024-07-17 15:34:38,996:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 15:34:39,235:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,258:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,266:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,267:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,281:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,287:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,290:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,293:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,299:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,304:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,313:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,316:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,317:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,328:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,336:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,346:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,353:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,377:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,392:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,405:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,415:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,432:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,444:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,454:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,458:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,465:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,472:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,483:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,489:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,495:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,513:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,517:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,524:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,529:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,537:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,543:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,612:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,619:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 15:34:39,628:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:39,658:INFO:Calculating mean and std
2024-07-17 15:34:39,660:INFO:Creating metrics dataframe
2024-07-17 15:34:39,662:INFO:Uploading results into container
2024-07-17 15:34:39,663:INFO:Uploading model into container now
2024-07-17 15:34:39,663:INFO:_master_model_container: 15
2024-07-17 15:34:39,663:INFO:_display_container: 2
2024-07-17 15:34:39,664:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-07-17 15:34:39,664:INFO:create_model() successfully completed......................................
2024-07-17 15:34:39,775:INFO:SubProcess create_model() end ==================================
2024-07-17 15:34:39,775:INFO:Creating metrics dataframe
2024-07-17 15:34:39,800:INFO:Initializing create_model()
2024-07-17 15:34:39,800:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F76C18850>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 15:34:39,801:INFO:Checking exceptions
2024-07-17 15:34:39,804:INFO:Importing libraries
2024-07-17 15:34:39,805:INFO:Copying training dataset
2024-07-17 15:34:39,827:INFO:Defining folds
2024-07-17 15:34:39,827:INFO:Declaring metric variables
2024-07-17 15:34:39,827:INFO:Importing untrained model
2024-07-17 15:34:39,828:INFO:Declaring custom model
2024-07-17 15:34:39,828:INFO:CatBoost Classifier Imported successfully
2024-07-17 15:34:39,829:INFO:Cross validation set to False
2024-07-17 15:34:39,829:INFO:Fitting Model
2024-07-17 15:34:46,156:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>
2024-07-17 15:34:46,156:INFO:create_model() successfully completed......................................
2024-07-17 15:34:46,299:INFO:_master_model_container: 15
2024-07-17 15:34:46,299:INFO:_display_container: 2
2024-07-17 15:34:46,300:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>
2024-07-17 15:34:46,300:INFO:compare_models() successfully completed......................................
2024-07-17 15:34:46,300:INFO:Initializing evaluate_model()
2024-07-17 15:34:46,300:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-07-17 15:34:46,346:INFO:Initializing plot_model()
2024-07-17 15:34:46,346:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-07-17 15:34:46,347:INFO:Checking exceptions
2024-07-17 15:34:46,358:INFO:Preloading libraries
2024-07-17 15:34:46,366:INFO:Copying training dataset
2024-07-17 15:34:46,367:INFO:Plot type: pipeline
2024-07-17 15:34:46,732:INFO:Visual Rendered Successfully
2024-07-17 15:34:46,841:INFO:plot_model() successfully completed......................................
2024-07-17 15:34:46,846:INFO:Initializing predict_model()
2024-07-17 15:34:46,847:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F7737C9A0>)
2024-07-17 15:34:46,847:INFO:Checking exceptions
2024-07-17 15:34:46,847:INFO:Preloading libraries
2024-07-17 15:34:46,992:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:47,005:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:47,017:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 15:34:47,152:INFO:Initializing predict_model()
2024-07-17 15:34:47,152:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F7395E700>)
2024-07-17 15:34:47,152:INFO:Checking exceptions
2024-07-17 15:34:47,152:INFO:Preloading libraries
2024-07-17 15:34:47,154:INFO:Set up data.
2024-07-17 15:34:47,165:INFO:Set up index.
2024-07-17 15:34:47,333:INFO:Initializing save_model()
2024-07-17 15:34:47,333:INFO:save_model(model=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, model_name=best_pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\MTIDES\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['student_count',
                                             'awards_per_state_value',
                                             'awards_per_natl_value',
                                             'exp_award_value',
                                             'exp_award_state...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-17 15:34:47,333:INFO:Adding model into prep_pipe
2024-07-17 15:34:47,340:INFO:best_pipeline.pkl saved in current working directory
2024-07-17 15:34:47,344:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['student_count',
                                             'awards_per_state_value',
                                             'awards_per_natl_value',
                                             'exp_award_value',
                                             'exp_award_state_value',
                                             'exp_award_natl_value', 'ft_pct',
                                             '...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('trained_model',
                 <catboost.core.CatBoostClassifier object at 0x0000014F75520C10>)],
         verbose=False)
2024-07-17 15:34:47,345:INFO:save_model() successfully completed......................................
2024-07-17 15:47:21,315:INFO:Initializing plot_model()
2024-07-17 15:47:21,315:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 15:47:21,315:INFO:Checking exceptions
2024-07-17 15:47:21,327:INFO:Preloading libraries
2024-07-17 15:47:21,332:INFO:Copying training dataset
2024-07-17 15:47:21,332:INFO:Plot type: confusion_matrix
2024-07-17 15:47:21,597:INFO:Fitting Model
2024-07-17 15:47:21,626:INFO:Scoring test/hold-out set
2024-07-17 15:47:21,820:INFO:Visual Rendered Successfully
2024-07-17 15:47:21,952:INFO:plot_model() successfully completed......................................
2024-07-17 15:48:32,653:INFO:Initializing plot_model()
2024-07-17 15:48:32,654:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 15:48:32,654:INFO:Checking exceptions
2024-07-17 15:48:32,667:INFO:Preloading libraries
2024-07-17 15:48:32,679:INFO:Copying training dataset
2024-07-17 15:48:32,679:INFO:Plot type: auc
2024-07-17 15:48:32,899:INFO:Fitting Model
2024-07-17 15:48:32,901:INFO:Scoring test/hold-out set
2024-07-17 15:48:33,245:INFO:Visual Rendered Successfully
2024-07-17 15:48:33,403:INFO:plot_model() successfully completed......................................
2024-07-17 15:50:07,887:INFO:Initializing plot_model()
2024-07-17 15:50:07,888:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F75520C10>, plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 15:50:07,889:INFO:Checking exceptions
2024-07-17 15:50:07,908:INFO:Preloading libraries
2024-07-17 15:50:07,912:INFO:Copying training dataset
2024-07-17 15:50:07,913:INFO:Plot type: feature
2024-07-17 15:50:07,913:WARNING:No coef_ found. Trying feature_importances_
2024-07-17 15:50:08,264:INFO:Visual Rendered Successfully
2024-07-17 15:50:08,381:INFO:plot_model() successfully completed......................................
2024-07-17 16:02:34,533:INFO:Initializing create_model()
2024-07-17 16:02:34,534:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=catboost, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 16:02:34,534:INFO:Checking exceptions
2024-07-17 16:02:34,567:INFO:Importing libraries
2024-07-17 16:02:34,567:INFO:Copying training dataset
2024-07-17 16:02:34,582:INFO:Defining folds
2024-07-17 16:02:34,583:INFO:Declaring metric variables
2024-07-17 16:02:34,586:INFO:Importing untrained model
2024-07-17 16:02:34,590:INFO:CatBoost Classifier Imported successfully
2024-07-17 16:02:34,602:INFO:Starting cross validation
2024-07-17 16:02:34,604:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 16:02:42,107:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:02:42,123:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:02:42,135:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:02:42,200:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:02:42,360:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:02:42,384:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:02:42,500:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:02:42,799:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:03:04,285:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:04,292:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:04,299:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:06,410:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:06,418:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:06,426:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:06,726:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:06,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:06,761:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,069:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,085:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,103:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,206:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,221:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,239:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,377:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,390:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,406:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,917:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,940:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:07,958:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:08,039:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:08,055:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:08,069:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:18,474:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:18,482:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:18,491:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:19,043:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:19,048:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:19,053:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:03:19,064:INFO:Calculating mean and std
2024-07-17 16:03:19,067:INFO:Creating metrics dataframe
2024-07-17 16:03:19,076:INFO:Finalizing model
2024-07-17 16:03:24,681:INFO:Uploading results into container
2024-07-17 16:03:24,683:INFO:Uploading model into container now
2024-07-17 16:03:24,697:INFO:_master_model_container: 16
2024-07-17 16:03:24,698:INFO:_display_container: 4
2024-07-17 16:03:24,698:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>
2024-07-17 16:03:24,698:INFO:create_model() successfully completed......................................
2024-07-17 16:06:22,504:INFO:Initializing tune_model()
2024-07-17 16:06:22,505:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-07-17 16:06:22,505:INFO:Checking exceptions
2024-07-17 16:06:22,558:INFO:Copying training dataset
2024-07-17 16:06:22,571:INFO:Checking base model
2024-07-17 16:06:22,571:INFO:Base model : CatBoost Classifier
2024-07-17 16:06:22,577:INFO:Declaring metric variables
2024-07-17 16:06:22,582:INFO:Defining Hyperparameters
2024-07-17 16:06:22,700:INFO:Tuning with n_jobs=-1
2024-07-17 16:06:22,700:INFO:Initializing RandomizedSearchCV
2024-07-17 16:06:55,960:INFO:best_params: {'actual_estimator__random_strength': 0.7, 'actual_estimator__n_estimators': 250, 'actual_estimator__l2_leaf_reg': 50, 'actual_estimator__eta': 0.15, 'actual_estimator__depth': 3}
2024-07-17 16:06:55,962:INFO:Hyperparameter search completed
2024-07-17 16:06:55,963:INFO:SubProcess create_model() called ==================================
2024-07-17 16:06:55,964:INFO:Initializing create_model()
2024-07-17 16:06:55,964:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F73F9FE10>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F772CE450>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'random_strength': 0.7, 'n_estimators': 250, 'l2_leaf_reg': 50, 'eta': 0.15, 'depth': 3})
2024-07-17 16:06:55,964:INFO:Checking exceptions
2024-07-17 16:06:55,964:INFO:Importing libraries
2024-07-17 16:06:55,965:INFO:Copying training dataset
2024-07-17 16:06:55,984:INFO:Defining folds
2024-07-17 16:06:55,984:INFO:Declaring metric variables
2024-07-17 16:06:55,990:INFO:Importing untrained model
2024-07-17 16:06:55,990:INFO:Declaring custom model
2024-07-17 16:06:56,005:INFO:CatBoost Classifier Imported successfully
2024-07-17 16:06:56,023:INFO:Starting cross validation
2024-07-17 16:06:56,024:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 16:06:58,336:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,345:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,353:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,358:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,367:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,375:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,594:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,600:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,668:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,676:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,685:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,701:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,710:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,710:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,717:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,728:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,731:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,732:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,736:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,739:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,740:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,743:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:58,749:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:59,744:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:59,761:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:59,761:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:59,769:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:59,775:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:59,784:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:06:59,806:INFO:Calculating mean and std
2024-07-17 16:06:59,814:INFO:Creating metrics dataframe
2024-07-17 16:06:59,829:INFO:Finalizing model
2024-07-17 16:07:01,487:INFO:Uploading results into container
2024-07-17 16:07:01,489:INFO:Uploading model into container now
2024-07-17 16:07:01,490:INFO:_master_model_container: 17
2024-07-17 16:07:01,490:INFO:_display_container: 5
2024-07-17 16:07:01,491:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F772CCE50>
2024-07-17 16:07:01,491:INFO:create_model() successfully completed......................................
2024-07-17 16:07:01,646:INFO:SubProcess create_model() end ==================================
2024-07-17 16:07:01,646:INFO:choose_better activated
2024-07-17 16:07:01,653:INFO:SubProcess create_model() called ==================================
2024-07-17 16:07:01,655:INFO:Initializing create_model()
2024-07-17 16:07:01,656:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 16:07:01,657:INFO:Checking exceptions
2024-07-17 16:07:01,667:INFO:Importing libraries
2024-07-17 16:07:01,668:INFO:Copying training dataset
2024-07-17 16:07:01,755:INFO:Defining folds
2024-07-17 16:07:01,756:INFO:Declaring metric variables
2024-07-17 16:07:01,757:INFO:Importing untrained model
2024-07-17 16:07:01,758:INFO:Declaring custom model
2024-07-17 16:07:01,760:INFO:CatBoost Classifier Imported successfully
2024-07-17 16:07:01,762:INFO:Starting cross validation
2024-07-17 16:07:01,766:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 16:07:19,958:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:19,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:19,976:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:22,566:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:22,573:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:22,580:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:23,251:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:23,258:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:23,266:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,187:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,200:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,212:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,672:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,675:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,687:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,691:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,703:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,705:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,785:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,801:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,816:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,860:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,872:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:25,885:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:35,003:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:35,010:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:35,018:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:35,942:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:35,945:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:35,949:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:07:35,968:INFO:Calculating mean and std
2024-07-17 16:07:35,969:INFO:Creating metrics dataframe
2024-07-17 16:07:35,970:INFO:Finalizing model
2024-07-17 16:07:41,253:INFO:Uploading results into container
2024-07-17 16:07:41,253:INFO:Uploading model into container now
2024-07-17 16:07:41,253:INFO:_master_model_container: 18
2024-07-17 16:07:41,254:INFO:_display_container: 6
2024-07-17 16:07:41,254:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F77358E10>
2024-07-17 16:07:41,254:INFO:create_model() successfully completed......................................
2024-07-17 16:07:41,367:INFO:SubProcess create_model() end ==================================
2024-07-17 16:07:41,368:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F77358E10> result for Accuracy is 0.7874
2024-07-17 16:07:41,368:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F772CCE50> result for Accuracy is 0.7791
2024-07-17 16:07:41,368:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F77358E10> is best model
2024-07-17 16:07:41,368:INFO:choose_better completed
2024-07-17 16:07:41,368:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-07-17 16:07:41,381:INFO:_master_model_container: 18
2024-07-17 16:07:41,381:INFO:_display_container: 5
2024-07-17 16:07:41,381:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F77358E10>
2024-07-17 16:07:41,381:INFO:tune_model() successfully completed......................................
2024-07-17 16:26:48,266:INFO:Initializing tune_model()
2024-07-17 16:26:48,267:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>, fold=None, round=4, n_iter=10, custom_grid=None, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={'parameter_distributions': {'iterations': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F76DA5250>, 'learning_rate': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F76DA6C50>, 'depth': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F73FAC5D0>, 'l2_leaf_reg': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F774B6750>, 'border_count': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F774B4B90>, 'scale_pos_weight': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F774B6690>}})
2024-07-17 16:26:48,267:INFO:Checking exceptions
2024-07-17 16:26:48,300:INFO:Copying training dataset
2024-07-17 16:26:48,315:INFO:Checking base model
2024-07-17 16:26:48,315:INFO:Base model : CatBoost Classifier
2024-07-17 16:26:48,321:INFO:Declaring metric variables
2024-07-17 16:26:48,358:INFO:Defining Hyperparameters
2024-07-17 16:26:48,488:INFO:Tuning with n_jobs=-1
2024-07-17 16:26:48,488:INFO:Initializing RandomizedSearchCV
2024-07-17 16:36:22,527:INFO:Initializing tune_model()
2024-07-17 16:36:22,527:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>, fold=None, round=4, n_iter=10, custom_grid={'iterations': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F7B8849D0>, 'learning_rate': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F7B86A210>, 'depth': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F7B89FA10>, 'l2_leaf_reg': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F7B89F910>, 'border_count': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F7B89C2D0>, 'scale_pos_weight': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F7B89CAD0>}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-07-17 16:36:22,528:INFO:Checking exceptions
2024-07-17 16:36:22,568:INFO:Copying training dataset
2024-07-17 16:36:22,580:INFO:Checking base model
2024-07-17 16:36:22,580:INFO:Base model : CatBoost Classifier
2024-07-17 16:36:22,585:INFO:Declaring metric variables
2024-07-17 16:36:22,589:INFO:Defining Hyperparameters
2024-07-17 16:36:22,749:INFO:custom_grid: {'actual_estimator__iterations': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F7B8849D0>, 'actual_estimator__learning_rate': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F7B86A210>, 'actual_estimator__depth': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F7B89FA10>, 'actual_estimator__l2_leaf_reg': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F7B89F910>, 'actual_estimator__border_count': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x0000014F7B89C2D0>, 'actual_estimator__scale_pos_weight': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x0000014F7B89CAD0>}
2024-07-17 16:36:22,750:INFO:Tuning with n_jobs=-1
2024-07-17 16:36:22,750:INFO:Initializing RandomizedSearchCV
2024-07-17 16:36:30,584:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:30,612:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:30,649:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:30,652:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:30,680:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:30,707:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:30,730:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:30,827:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 16:36:36,109:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:37,423:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:37,441:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:37,469:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:37,714:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:38,201:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:38,205:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:38,231:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:42,827:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:43,644:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:43,896:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:44,355:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:44,384:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:44,526:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:44,550:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:44,557:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:45,571:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:45,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:48,206:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:48,240:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:48,257:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:48,263:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:48,331:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:48,354:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:50,574:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:50,623:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:52,762:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:53,086:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:53,090:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:53,096:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:53,396:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:53,483:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:53,493:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:54,481:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:54,769:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:54,980:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:55,364:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:55,472:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:55,477:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:56,028:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:56,202:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:56,837:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:57,923:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:58,165:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:58,761:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:59,423:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:36:59,954:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:37:01,540:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:37:01,681:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:37:50,100:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:37:59,227:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:01,911:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:04,002:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:05,789:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:06,094:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:07,154:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:07,781:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:26,170:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:28,700:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:29,974:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:30,861:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:30,872:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:31,567:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:36,415:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:45,263:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:47,612:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:47,926:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:48,522:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:50,277:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:51,483:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:52,083:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:53,291:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:38:54,563:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:01,705:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:02,291:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:04,154:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:09,367:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:11,772:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:12,216:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:34,950:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:36,843:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:44,848:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:46,594:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:47,289:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:56,209:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:57,760:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:58,250:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:39:59,144:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:00,271:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:00,536:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:03,196:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:04,095:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:04,711:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:06,158:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:07,243:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:07,260:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:08,095:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:08,188:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:08,341:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:08,357:INFO:best_params: {'actual_estimator__border_count': 246, 'actual_estimator__depth': 5, 'actual_estimator__iterations': 196, 'actual_estimator__l2_leaf_reg': 6.796942970226101, 'actual_estimator__learning_rate': 0.05198522878911536, 'actual_estimator__scale_pos_weight': 1.302035113322407}
2024-07-17 16:40:08,358:INFO:Hyperparameter search completed
2024-07-17 16:40:08,358:INFO:SubProcess create_model() called ==================================
2024-07-17 16:40:08,358:INFO:Initializing create_model()
2024-07-17 16:40:08,359:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F7719B650>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000014F76DC1450>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'border_count': 246, 'depth': 5, 'iterations': 196, 'l2_leaf_reg': 6.796942970226101, 'learning_rate': 0.05198522878911536, 'scale_pos_weight': 1.302035113322407})
2024-07-17 16:40:08,359:INFO:Checking exceptions
2024-07-17 16:40:08,359:INFO:Importing libraries
2024-07-17 16:40:08,359:INFO:Copying training dataset
2024-07-17 16:40:08,380:INFO:Defining folds
2024-07-17 16:40:08,380:INFO:Declaring metric variables
2024-07-17 16:40:08,386:INFO:Importing untrained model
2024-07-17 16:40:08,387:INFO:Declaring custom model
2024-07-17 16:40:08,394:INFO:CatBoost Classifier Imported successfully
2024-07-17 16:40:08,402:INFO:Starting cross validation
2024-07-17 16:40:08,403:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 16:40:11,766:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:11,779:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:11,814:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:11,846:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:11,868:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:11,884:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:12,694:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:12,716:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:12,730:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,153:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,166:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,179:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,208:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,222:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,243:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,380:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,394:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,407:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,410:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,424:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,425:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,438:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,442:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:13,455:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:14,973:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:14,992:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:15,008:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:15,151:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:15,167:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:15,188:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:15,250:INFO:Calculating mean and std
2024-07-17 16:40:15,267:INFO:Creating metrics dataframe
2024-07-17 16:40:15,301:INFO:Finalizing model
2024-07-17 16:40:19,305:INFO:Uploading results into container
2024-07-17 16:40:19,306:INFO:Uploading model into container now
2024-07-17 16:40:19,307:INFO:_master_model_container: 19
2024-07-17 16:40:19,308:INFO:_display_container: 6
2024-07-17 16:40:19,308:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F7B618150>
2024-07-17 16:40:19,308:INFO:create_model() successfully completed......................................
2024-07-17 16:40:19,520:INFO:SubProcess create_model() end ==================================
2024-07-17 16:40:19,520:INFO:choose_better activated
2024-07-17 16:40:19,524:INFO:SubProcess create_model() called ==================================
2024-07-17 16:40:19,525:INFO:Initializing create_model()
2024-07-17 16:40:19,525:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 16:40:19,526:INFO:Checking exceptions
2024-07-17 16:40:19,528:INFO:Importing libraries
2024-07-17 16:40:19,528:INFO:Copying training dataset
2024-07-17 16:40:19,544:INFO:Defining folds
2024-07-17 16:40:19,544:INFO:Declaring metric variables
2024-07-17 16:40:19,544:INFO:Importing untrained model
2024-07-17 16:40:19,544:INFO:Declaring custom model
2024-07-17 16:40:19,545:INFO:CatBoost Classifier Imported successfully
2024-07-17 16:40:19,545:INFO:Starting cross validation
2024-07-17 16:40:19,546:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 16:40:38,210:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:38,235:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:38,259:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,457:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,468:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,474:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,593:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,600:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,895:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,900:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,902:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,908:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,910:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:43,916:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,118:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,125:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,133:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,151:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,158:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,164:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,186:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,194:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:44,202:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:48,987:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:48,995:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:49,003:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:49,810:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:49,814:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:49,818:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 16:40:49,830:INFO:Calculating mean and std
2024-07-17 16:40:49,830:INFO:Creating metrics dataframe
2024-07-17 16:40:49,832:INFO:Finalizing model
2024-07-17 16:40:55,444:INFO:Uploading results into container
2024-07-17 16:40:55,445:INFO:Uploading model into container now
2024-07-17 16:40:55,445:INFO:_master_model_container: 20
2024-07-17 16:40:55,445:INFO:_display_container: 7
2024-07-17 16:40:55,446:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F78F6C050>
2024-07-17 16:40:55,446:INFO:create_model() successfully completed......................................
2024-07-17 16:40:55,588:INFO:SubProcess create_model() end ==================================
2024-07-17 16:40:55,588:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F78F6C050> result for F1 is 0.787
2024-07-17 16:40:55,588:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F7B618150> result for F1 is 0.7849
2024-07-17 16:40:55,588:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F78F6C050> is best model
2024-07-17 16:40:55,588:INFO:choose_better completed
2024-07-17 16:40:55,588:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-07-17 16:40:55,604:INFO:_master_model_container: 20
2024-07-17 16:40:55,605:INFO:_display_container: 6
2024-07-17 16:40:55,605:INFO:<catboost.core.CatBoostClassifier object at 0x0000014F78F6C050>
2024-07-17 16:40:55,605:INFO:tune_model() successfully completed......................................
2024-07-17 16:42:47,554:INFO:Initializing interpret_model()
2024-07-17 16:42:47,555:INFO:interpret_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>, plot=summary, feature=None, observation=None, use_train_data=False, X_new_sample=None, y_new_sample=None, save=False, kwargs={})
2024-07-17 16:42:47,555:INFO:Checking exceptions
2024-07-17 16:42:47,556:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2024-07-17 16:44:59,776:INFO:Initializing interpret_model()
2024-07-17 16:44:59,776:INFO:interpret_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000014F735DBD10>, estimator=<catboost.core.CatBoostClassifier object at 0x0000014F72D0FE10>, plot=summary, feature=None, observation=None, use_train_data=False, X_new_sample=None, y_new_sample=None, save=False, kwargs={})
2024-07-17 16:44:59,776:INFO:Checking exceptions
2024-07-17 16:44:59,777:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2024-07-17 17:07:52,965:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_1f7f2ad47ba14f4ab3e5cd59342c1163
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,965:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_ec4e6cdec0de40bf88142a9f1c3f97f3_2dd11ad9a2dd4120ad0be4b14c96cfac
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,966:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_ba6f2bd5455b4b8283bb9faf7e8a90a8
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,966:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_1ca70be6b79a4a4cb12dab12e27ddf0b_b53c180499df4a3292f61f6ffc2b9a5d
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,966:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_66ec701a44364dd5853eee9250a62e07
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,966:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_4dfad7692ca14c6da5d11302609722cf_79714b5bb75f4396a028c1714dadf15a
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,966:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_90ce650b400f4391845ee8236b9b2c50
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,966:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_5e839d816e064bbeb498054d432f1caa_39617f74ca34483882878114571dfc21
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_9d83730150794167973e016c9f53f2a8
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_04e1aa624c994e4ba5d5f87a64529fe2_a17b0cc5f14c4065addd1b5b2070a8c8
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_33f5598ee127407d87c7c13635de6abb
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_7afb7b0176c441758b5e9f4d409e9c3b_ad86fd61f1044354ab426ce1e8a5700b
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_5510bcb8a84b45a0acf670b9c3d5e0d8
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_dff2571f8c2346afa7bd8e24a1fc3663_9d3a9e2403f54d69868adcaeeb55563f
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_41c99fd015b5434e89321c3fd8289d3c
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_03f6adff84144a1cabc698b44cf0d935_6e340aff0fa04aaea53ca83a8c1a640e
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_eb9c33648fa14868a138d31097f67f9a
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_430448774361407db26d412f6c5e8e2e_4be7d8642a7a4013b9cfb23ecb971789
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_caaf755e053446368d8090ef3d5a12e5
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_d9d8c6f2e77f4c21b7c266a1e87ad3e7_1c6895796bee453aa356be4aa82d84f6
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_3f2aa7e1ff934c0692e6c97e6683272d
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,968:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_99f9e51c74ba4020beb04aa175020a31_d5801d95e84a42d89438a16d0887a5e9
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_d180bf7c39214707851a9559488e9138
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_40c5a76fb3c842ff9d909c049eda4775_8e390d1b4bed438786dce43e71fba565
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_fa84bb5ef7064830afabcf093e0f9234
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_cd0eb0dd602a413fb30ba8c035404463_d7cf33ea44244f9d8591790b1c26cc01
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_68fb7d975274444395524bb1f5257252
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_82cac1618e3841d18f3bbf77665c6b8b_37d9590c0dd54abe9ff0732dd0561948
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_6c2625025bd54371abb370afa3ae2ee0
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_238348379b894ad388219745ce6ee3f2_4ae6aea94da14b9cb365d31b80166529
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_958ff00682e9498591483e2ba4897ae3
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_c42df424dbc74575bd4a33409bb82477_42ee8f38b8084cc2ba80c86e58f9ed65
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_1cc50505cda14ae8b4f5d2e6bb3a29c4
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_a6f107bd9d4f49408bd88680fc2f6cb5_53c2f9576a664dbcaa862739f9f6c1ad
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_0fd01d72977243a8bf3ef66064e0c373
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_264f07ca20954044adf4fdca20182869_ce9c8aa0618147a1ad93342f43e6b571
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_ef725e2259c44bce8df3d6736cb833ef
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_4a2b90e7238344b2b33a3cf2548fa7b5_ddd5cb9ab4384644b5b9957b059e7692
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_fd0da7c2a7814e1eb789d8b2ebda99da
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_20c4bbc50a7240fe95debee041ab3644_c599e1b5257b49efb38087f8edfdcbe9
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_87299bfb925c4df89885b0654dca6bcf
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_950e306aa1304f7db930ddcd428a627d_0fbab36519d540cfbb140da68b57f475
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,972:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_6ba66ececa1d4926bc123482daefc880
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,972:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_e35922532fbd4d1d9d3a2154592483a6_fe99c0798fb54ded93c3ba542e16092e
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,974:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_3b60fcd898604b439081a82ae75a8edd
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,975:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_a4652d6ab187445dae996b68542365e6_3a55a1fc6a884d9da676a1b2e4acc8da
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,975:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_66afa97aa2934073b06b84228491ff8d
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,975:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_f75a50d271cf46788803a151b91d05d5_6419e0d343ff4779818e996904dc1209
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,980:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_c265fca451594360aa5b7f3edb4e6f0f
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:07:52,980:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_32820_0937b2582a3f4eb5b7ba14f5810f9a3f_3428b640eb63486489ed0673da49bcb2
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 17:41:45,864:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 17:41:45,864:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 17:41:45,864:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 17:41:45,864:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-17 17:41:54,233:INFO:PyCaret ClassificationExperiment
2024-07-17 17:41:54,233:INFO:Logging name: clf-default-name
2024-07-17 17:41:54,234:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-07-17 17:41:54,234:INFO:version 3.3.2
2024-07-17 17:41:54,234:INFO:Initializing setup()
2024-07-17 17:41:54,234:INFO:self.USI: 58d0
2024-07-17 17:41:54,234:INFO:self._variable_keys: {'fix_imbalance', '_available_plots', 'exp_id', 'html_param', 'exp_name_log', 'X', 'memory', 'pipeline', 'n_jobs_param', 'fold_generator', 'data', 'USI', 'seed', 'fold_groups_param', 'X_train', 'X_test', 'target_param', 'is_multiclass', 'gpu_n_jobs_param', 'gpu_param', 'y_train', '_ml_usecase', 'log_plots_param', 'y', 'idx', 'logging_param', 'fold_shuffle_param', 'y_test'}
2024-07-17 17:41:54,234:INFO:Checking environment
2024-07-17 17:41:54,235:INFO:python_version: 3.11.7
2024-07-17 17:41:54,235:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-07-17 17:41:54,235:INFO:machine: AMD64
2024-07-17 17:41:54,235:INFO:platform: Windows-10-10.0.19045-SP0
2024-07-17 17:41:54,235:INFO:Memory: svmem(total=17064296448, available=6770290688, percent=60.3, used=10294005760, free=6770290688)
2024-07-17 17:41:54,235:INFO:Physical Core: 4
2024-07-17 17:41:54,236:INFO:Logical Core: 8
2024-07-17 17:41:54,236:INFO:Checking libraries
2024-07-17 17:41:54,236:INFO:System:
2024-07-17 17:41:54,236:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-07-17 17:41:54,236:INFO:executable: C:\Users\MTIDES\anaconda3\python.exe
2024-07-17 17:41:54,236:INFO:   machine: Windows-10-10.0.19045-SP0
2024-07-17 17:41:54,236:INFO:PyCaret required dependencies:
2024-07-17 17:41:54,608:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:41:55,199:INFO:                 pip: 23.2.1
2024-07-17 17:41:55,199:INFO:          setuptools: 68.2.2
2024-07-17 17:41:55,199:INFO:             pycaret: 3.3.2
2024-07-17 17:41:55,200:INFO:             IPython: 8.20.0
2024-07-17 17:41:55,200:INFO:          ipywidgets: 8.0.4
2024-07-17 17:41:55,200:INFO:                tqdm: 4.65.0
2024-07-17 17:41:55,200:INFO:               numpy: 1.24.3
2024-07-17 17:41:55,200:INFO:              pandas: 2.1.4
2024-07-17 17:41:55,200:INFO:              jinja2: 3.1.2
2024-07-17 17:41:55,200:INFO:               scipy: 1.11.4
2024-07-17 17:41:55,200:INFO:              joblib: 1.3.2
2024-07-17 17:41:55,200:INFO:             sklearn: 1.4.2
2024-07-17 17:41:55,200:INFO:                pyod: 2.0.1
2024-07-17 17:41:55,200:INFO:            imblearn: 0.11.0
2024-07-17 17:41:55,200:INFO:   category_encoders: 2.6.3
2024-07-17 17:41:55,200:INFO:            lightgbm: 4.4.0
2024-07-17 17:41:55,200:INFO:               numba: 0.58.1
2024-07-17 17:41:55,200:INFO:            requests: 2.31.0
2024-07-17 17:41:55,201:INFO:          matplotlib: 3.8.0
2024-07-17 17:41:55,201:INFO:          scikitplot: 0.3.7
2024-07-17 17:41:55,201:INFO:         yellowbrick: 1.5
2024-07-17 17:41:55,201:INFO:              plotly: 5.22.0
2024-07-17 17:41:55,201:INFO:    plotly-resampler: Not installed
2024-07-17 17:41:55,201:INFO:             kaleido: 0.2.1
2024-07-17 17:41:55,201:INFO:           schemdraw: 0.15
2024-07-17 17:41:55,201:INFO:         statsmodels: 0.14.0
2024-07-17 17:41:55,201:INFO:              sktime: 0.26.0
2024-07-17 17:41:55,201:INFO:               tbats: 1.1.3
2024-07-17 17:41:55,201:INFO:            pmdarima: 2.0.4
2024-07-17 17:41:55,201:INFO:              psutil: 5.9.0
2024-07-17 17:41:55,201:INFO:          markupsafe: 2.1.3
2024-07-17 17:41:55,201:INFO:             pickle5: Not installed
2024-07-17 17:41:55,201:INFO:         cloudpickle: 2.2.1
2024-07-17 17:41:55,202:INFO:         deprecation: 2.1.0
2024-07-17 17:41:55,202:INFO:              xxhash: 2.0.2
2024-07-17 17:41:55,202:INFO:           wurlitzer: Not installed
2024-07-17 17:41:55,202:INFO:PyCaret optional dependencies:
2024-07-17 17:41:55,226:INFO:                shap: 0.46.0
2024-07-17 17:41:55,226:INFO:           interpret: Not installed
2024-07-17 17:41:55,226:INFO:                umap: Not installed
2024-07-17 17:41:55,226:INFO:     ydata_profiling: 4.6.4
2024-07-17 17:41:55,226:INFO:  explainerdashboard: Not installed
2024-07-17 17:41:55,227:INFO:             autoviz: Not installed
2024-07-17 17:41:55,227:INFO:           fairlearn: Not installed
2024-07-17 17:41:55,227:INFO:          deepchecks: Not installed
2024-07-17 17:41:55,227:INFO:             xgboost: Not installed
2024-07-17 17:41:55,227:INFO:            catboost: 1.2.5
2024-07-17 17:41:55,227:INFO:              kmodes: Not installed
2024-07-17 17:41:55,227:INFO:             mlxtend: Not installed
2024-07-17 17:41:55,227:INFO:       statsforecast: Not installed
2024-07-17 17:41:55,227:INFO:        tune_sklearn: Not installed
2024-07-17 17:41:55,227:INFO:                 ray: Not installed
2024-07-17 17:41:55,227:INFO:            hyperopt: Not installed
2024-07-17 17:41:55,227:INFO:              optuna: Not installed
2024-07-17 17:41:55,228:INFO:               skopt: Not installed
2024-07-17 17:41:55,228:INFO:              mlflow: Not installed
2024-07-17 17:41:55,228:INFO:              gradio: Not installed
2024-07-17 17:41:55,228:INFO:             fastapi: Not installed
2024-07-17 17:41:55,228:INFO:             uvicorn: Not installed
2024-07-17 17:41:55,228:INFO:              m2cgen: Not installed
2024-07-17 17:41:55,228:INFO:           evidently: Not installed
2024-07-17 17:41:55,228:INFO:               fugue: Not installed
2024-07-17 17:41:55,228:INFO:           streamlit: Not installed
2024-07-17 17:41:55,228:INFO:             prophet: Not installed
2024-07-17 17:41:55,228:INFO:None
2024-07-17 17:41:55,228:INFO:Set up data.
2024-07-17 17:41:55,243:INFO:Set up folding strategy.
2024-07-17 17:41:55,244:INFO:Set up train/test split.
2024-07-17 17:41:55,263:INFO:Set up index.
2024-07-17 17:41:55,263:INFO:Assigning column types.
2024-07-17 17:41:55,274:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-07-17 17:41:55,331:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-17 17:41:55,335:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 17:41:55,377:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:55,378:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:55,434:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-17 17:41:55,435:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 17:41:55,470:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:55,471:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:55,471:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-07-17 17:41:55,524:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 17:41:55,554:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:55,555:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:55,604:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-17 17:41:55,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:55,634:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:55,635:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-07-17 17:41:55,713:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:55,714:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:55,806:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:55,807:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:55,809:INFO:Preparing preprocessing pipeline...
2024-07-17 17:41:55,811:INFO:Set up label encoding.
2024-07-17 17:41:55,811:INFO:Set up simple imputation.
2024-07-17 17:41:55,860:INFO:Finished creating preprocessing pipeline.
2024-07-17 17:41:55,865:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\MTIDES\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['student_count',
                                             'awards_per_state_value',
                                             'awards_per_natl_value',
                                             'exp_award_value',
                                             'exp_award_state...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-07-17 17:41:55,865:INFO:Creating final display dataframe.
2024-07-17 17:41:56,066:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target  num_awards_given
2                   Target type            Binary
3                Target mapping   High: 0, Low: 1
4           Original data shape        (3798, 40)
5        Transformed data shape        (3798, 40)
6   Transformed train set shape        (2658, 40)
7    Transformed test set shape        (1140, 40)
8              Numeric features                39
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              58d0
2024-07-17 17:41:56,201:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:56,201:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:56,378:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-17 17:41:56,378:INFO:Soft dependency imported: catboost: 1.2.5
2024-07-17 17:41:56,382:INFO:setup() successfully completed in 2.15s...............
2024-07-17 17:41:56,382:INFO:Initializing compare_models()
2024-07-17 17:41:56,382:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-07-17 17:41:56,383:INFO:Checking exceptions
2024-07-17 17:41:56,400:INFO:Preparing display monitor
2024-07-17 17:41:56,461:INFO:Initializing Logistic Regression
2024-07-17 17:41:56,462:INFO:Total runtime is 0.0 minutes
2024-07-17 17:41:56,468:INFO:SubProcess create_model() called ==================================
2024-07-17 17:41:56,468:INFO:Initializing create_model()
2024-07-17 17:41:56,469:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:41:56,469:INFO:Checking exceptions
2024-07-17 17:41:56,469:INFO:Importing libraries
2024-07-17 17:41:56,469:INFO:Copying training dataset
2024-07-17 17:41:56,485:INFO:Defining folds
2024-07-17 17:41:56,485:INFO:Declaring metric variables
2024-07-17 17:41:56,489:INFO:Importing untrained model
2024-07-17 17:41:56,492:INFO:Logistic Regression Imported successfully
2024-07-17 17:41:56,503:INFO:Starting cross validation
2024-07-17 17:41:56,504:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:41:59,648:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:41:59,673:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:41:59,680:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:41:59,722:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:41:59,811:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:41:59,822:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:41:59,965:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:42:00,048:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\dask\dataframe\_pyarrow_compat.py:23: UserWarning: You are using pyarrow version 11.0.0 which is known to be insecure. See https://www.cve.org/CVERecord?id=CVE-2023-47248 for further details. Please upgrade to pyarrow>=14.0.1 or install pyarrow-hotfix to patch your current version.
  warnings.warn(

2024-07-17 17:42:01,449:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:01,480:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,494:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,503:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,536:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:01,564:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:01,571:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,580:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,589:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,599:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,611:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,621:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,644:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:01,672:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:01,678:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,687:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,696:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,700:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,721:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,870:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:01,896:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,902:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:01,903:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,912:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,920:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,928:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:01,942:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,011:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:02,028:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,028:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:02,032:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,037:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,042:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,046:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,050:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,210:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-07-17 17:42:02,224:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,229:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,233:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,247:INFO:Calculating mean and std
2024-07-17 17:42:02,250:INFO:Creating metrics dataframe
2024-07-17 17:42:02,252:INFO:Uploading results into container
2024-07-17 17:42:02,253:INFO:Uploading model into container now
2024-07-17 17:42:02,253:INFO:_master_model_container: 1
2024-07-17 17:42:02,254:INFO:_display_container: 2
2024-07-17 17:42:02,254:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-17 17:42:02,254:INFO:create_model() successfully completed......................................
2024-07-17 17:42:02,368:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:02,368:INFO:Creating metrics dataframe
2024-07-17 17:42:02,376:INFO:Initializing K Neighbors Classifier
2024-07-17 17:42:02,376:INFO:Total runtime is 0.09858722686767578 minutes
2024-07-17 17:42:02,380:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:02,380:INFO:Initializing create_model()
2024-07-17 17:42:02,380:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:02,380:INFO:Checking exceptions
2024-07-17 17:42:02,381:INFO:Importing libraries
2024-07-17 17:42:02,381:INFO:Copying training dataset
2024-07-17 17:42:02,397:INFO:Defining folds
2024-07-17 17:42:02,397:INFO:Declaring metric variables
2024-07-17 17:42:02,402:INFO:Importing untrained model
2024-07-17 17:42:02,407:INFO:K Neighbors Classifier Imported successfully
2024-07-17 17:42:02,418:INFO:Starting cross validation
2024-07-17 17:42:02,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:02,932:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,940:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,948:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,951:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,959:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,966:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,973:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,975:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,976:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,981:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,982:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,984:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:02,990:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,020:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,029:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,029:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,039:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,041:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,052:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,085:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,089:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,093:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,216:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,219:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,221:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,224:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,227:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,228:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,240:INFO:Calculating mean and std
2024-07-17 17:42:03,241:INFO:Creating metrics dataframe
2024-07-17 17:42:03,243:INFO:Uploading results into container
2024-07-17 17:42:03,244:INFO:Uploading model into container now
2024-07-17 17:42:03,244:INFO:_master_model_container: 2
2024-07-17 17:42:03,244:INFO:_display_container: 2
2024-07-17 17:42:03,245:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-07-17 17:42:03,245:INFO:create_model() successfully completed......................................
2024-07-17 17:42:03,360:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:03,360:INFO:Creating metrics dataframe
2024-07-17 17:42:03,368:INFO:Initializing Naive Bayes
2024-07-17 17:42:03,369:INFO:Total runtime is 0.11514617999394734 minutes
2024-07-17 17:42:03,374:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:03,375:INFO:Initializing create_model()
2024-07-17 17:42:03,375:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:03,375:INFO:Checking exceptions
2024-07-17 17:42:03,375:INFO:Importing libraries
2024-07-17 17:42:03,375:INFO:Copying training dataset
2024-07-17 17:42:03,390:INFO:Defining folds
2024-07-17 17:42:03,390:INFO:Declaring metric variables
2024-07-17 17:42:03,394:INFO:Importing untrained model
2024-07-17 17:42:03,398:INFO:Naive Bayes Imported successfully
2024-07-17 17:42:03,405:INFO:Starting cross validation
2024-07-17 17:42:03,406:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:03,475:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,482:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,490:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,490:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,490:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,497:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,498:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,498:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,505:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,506:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,507:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,513:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,513:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,515:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,515:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,520:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,523:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,523:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,527:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,528:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,530:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,535:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,543:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,549:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,555:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,559:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,580:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,599:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,622:INFO:Calculating mean and std
2024-07-17 17:42:03,623:INFO:Creating metrics dataframe
2024-07-17 17:42:03,626:INFO:Uploading results into container
2024-07-17 17:42:03,627:INFO:Uploading model into container now
2024-07-17 17:42:03,627:INFO:_master_model_container: 3
2024-07-17 17:42:03,628:INFO:_display_container: 2
2024-07-17 17:42:03,628:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-07-17 17:42:03,628:INFO:create_model() successfully completed......................................
2024-07-17 17:42:03,742:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:03,743:INFO:Creating metrics dataframe
2024-07-17 17:42:03,750:INFO:Initializing Decision Tree Classifier
2024-07-17 17:42:03,750:INFO:Total runtime is 0.12148118019104004 minutes
2024-07-17 17:42:03,754:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:03,755:INFO:Initializing create_model()
2024-07-17 17:42:03,756:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:03,756:INFO:Checking exceptions
2024-07-17 17:42:03,757:INFO:Importing libraries
2024-07-17 17:42:03,757:INFO:Copying training dataset
2024-07-17 17:42:03,791:INFO:Defining folds
2024-07-17 17:42:03,792:INFO:Declaring metric variables
2024-07-17 17:42:03,795:INFO:Importing untrained model
2024-07-17 17:42:03,804:INFO:Decision Tree Classifier Imported successfully
2024-07-17 17:42:03,817:INFO:Starting cross validation
2024-07-17 17:42:03,818:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:03,945:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,952:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,953:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,959:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,960:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,961:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,963:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,975:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,976:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,979:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,986:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,994:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:03,997:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,003:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,005:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,013:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,014:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,024:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,036:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,056:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,060:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,060:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,064:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,064:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,069:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,076:INFO:Calculating mean and std
2024-07-17 17:42:04,077:INFO:Creating metrics dataframe
2024-07-17 17:42:04,079:INFO:Uploading results into container
2024-07-17 17:42:04,079:INFO:Uploading model into container now
2024-07-17 17:42:04,079:INFO:_master_model_container: 4
2024-07-17 17:42:04,080:INFO:_display_container: 2
2024-07-17 17:42:04,080:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-07-17 17:42:04,080:INFO:create_model() successfully completed......................................
2024-07-17 17:42:04,195:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:04,195:INFO:Creating metrics dataframe
2024-07-17 17:42:04,204:INFO:Initializing SVM - Linear Kernel
2024-07-17 17:42:04,205:INFO:Total runtime is 0.12906424601872762 minutes
2024-07-17 17:42:04,212:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:04,213:INFO:Initializing create_model()
2024-07-17 17:42:04,213:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:04,213:INFO:Checking exceptions
2024-07-17 17:42:04,213:INFO:Importing libraries
2024-07-17 17:42:04,213:INFO:Copying training dataset
2024-07-17 17:42:04,246:INFO:Defining folds
2024-07-17 17:42:04,246:INFO:Declaring metric variables
2024-07-17 17:42:04,251:INFO:Importing untrained model
2024-07-17 17:42:04,258:INFO:SVM - Linear Kernel Imported successfully
2024-07-17 17:42:04,266:INFO:Starting cross validation
2024-07-17 17:42:04,268:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:04,374:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,381:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,381:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,388:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,389:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,396:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,422:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,422:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,429:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,430:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,432:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,437:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,437:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,440:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,445:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,446:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,450:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,452:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,454:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,460:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,461:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,482:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,486:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,489:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,490:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,494:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,496:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,499:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,502:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,503:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,518:INFO:Calculating mean and std
2024-07-17 17:42:04,519:INFO:Creating metrics dataframe
2024-07-17 17:42:04,521:INFO:Uploading results into container
2024-07-17 17:42:04,522:INFO:Uploading model into container now
2024-07-17 17:42:04,523:INFO:_master_model_container: 5
2024-07-17 17:42:04,523:INFO:_display_container: 2
2024-07-17 17:42:04,523:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-17 17:42:04,523:INFO:create_model() successfully completed......................................
2024-07-17 17:42:04,636:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:04,636:INFO:Creating metrics dataframe
2024-07-17 17:42:04,645:INFO:Initializing Ridge Classifier
2024-07-17 17:42:04,646:INFO:Total runtime is 0.13642597993214925 minutes
2024-07-17 17:42:04,650:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:04,650:INFO:Initializing create_model()
2024-07-17 17:42:04,651:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:04,651:INFO:Checking exceptions
2024-07-17 17:42:04,651:INFO:Importing libraries
2024-07-17 17:42:04,651:INFO:Copying training dataset
2024-07-17 17:42:04,664:INFO:Defining folds
2024-07-17 17:42:04,665:INFO:Declaring metric variables
2024-07-17 17:42:04,669:INFO:Importing untrained model
2024-07-17 17:42:04,675:INFO:Ridge Classifier Imported successfully
2024-07-17 17:42:04,682:INFO:Starting cross validation
2024-07-17 17:42:04,683:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:04,757:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,759:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,763:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,765:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,766:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,767:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,770:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,770:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,772:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,773:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,775:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,775:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,777:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,779:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,780:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,782:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,785:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,788:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,789:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,795:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,800:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,823:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,827:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,830:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,831:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,834:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,838:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,851:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,861:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,871:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:04,896:INFO:Calculating mean and std
2024-07-17 17:42:04,897:INFO:Creating metrics dataframe
2024-07-17 17:42:04,900:INFO:Uploading results into container
2024-07-17 17:42:04,901:INFO:Uploading model into container now
2024-07-17 17:42:04,901:INFO:_master_model_container: 6
2024-07-17 17:42:04,901:INFO:_display_container: 2
2024-07-17 17:42:04,902:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-07-17 17:42:04,902:INFO:create_model() successfully completed......................................
2024-07-17 17:42:05,012:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:05,012:INFO:Creating metrics dataframe
2024-07-17 17:42:05,022:INFO:Initializing Random Forest Classifier
2024-07-17 17:42:05,022:INFO:Total runtime is 0.14268686374028525 minutes
2024-07-17 17:42:05,026:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:05,026:INFO:Initializing create_model()
2024-07-17 17:42:05,027:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:05,027:INFO:Checking exceptions
2024-07-17 17:42:05,027:INFO:Importing libraries
2024-07-17 17:42:05,027:INFO:Copying training dataset
2024-07-17 17:42:05,041:INFO:Defining folds
2024-07-17 17:42:05,041:INFO:Declaring metric variables
2024-07-17 17:42:05,045:INFO:Importing untrained model
2024-07-17 17:42:05,049:INFO:Random Forest Classifier Imported successfully
2024-07-17 17:42:05,056:INFO:Starting cross validation
2024-07-17 17:42:05,058:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:07,331:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,359:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,357:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,383:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,396:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,404:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,418:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,453:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,454:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,479:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,481:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,485:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,500:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,507:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,510:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,521:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,541:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,542:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,555:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,579:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,593:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,815:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,845:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:07,888:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,401:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,409:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,418:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,478:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,488:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,495:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,515:INFO:Calculating mean and std
2024-07-17 17:42:08,517:INFO:Creating metrics dataframe
2024-07-17 17:42:08,521:INFO:Uploading results into container
2024-07-17 17:42:08,522:INFO:Uploading model into container now
2024-07-17 17:42:08,523:INFO:_master_model_container: 7
2024-07-17 17:42:08,523:INFO:_display_container: 2
2024-07-17 17:42:08,524:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-07-17 17:42:08,524:INFO:create_model() successfully completed......................................
2024-07-17 17:42:08,665:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:08,665:INFO:Creating metrics dataframe
2024-07-17 17:42:08,683:INFO:Initializing Quadratic Discriminant Analysis
2024-07-17 17:42:08,683:INFO:Total runtime is 0.2036979675292969 minutes
2024-07-17 17:42:08,691:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:08,692:INFO:Initializing create_model()
2024-07-17 17:42:08,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:08,693:INFO:Checking exceptions
2024-07-17 17:42:08,693:INFO:Importing libraries
2024-07-17 17:42:08,693:INFO:Copying training dataset
2024-07-17 17:42:08,716:INFO:Defining folds
2024-07-17 17:42:08,717:INFO:Declaring metric variables
2024-07-17 17:42:08,725:INFO:Importing untrained model
2024-07-17 17:42:08,736:INFO:Quadratic Discriminant Analysis Imported successfully
2024-07-17 17:42:08,750:INFO:Starting cross validation
2024-07-17 17:42:08,752:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:08,850:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,855:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,858:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,861:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,873:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,876:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,895:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,899:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,902:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,902:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,908:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,912:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,916:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,920:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,921:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,923:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,924:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,926:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,929:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,934:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,942:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,945:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,948:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,941:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,957:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,958:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,962:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,969:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,979:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,988:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:08,989:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:08,998:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:09,003:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-17 17:42:09,014:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:09,022:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:09,029:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:09,029:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:09,036:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:09,043:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:09,060:INFO:Calculating mean and std
2024-07-17 17:42:09,062:INFO:Creating metrics dataframe
2024-07-17 17:42:09,065:INFO:Uploading results into container
2024-07-17 17:42:09,066:INFO:Uploading model into container now
2024-07-17 17:42:09,067:INFO:_master_model_container: 8
2024-07-17 17:42:09,067:INFO:_display_container: 2
2024-07-17 17:42:09,067:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-07-17 17:42:09,067:INFO:create_model() successfully completed......................................
2024-07-17 17:42:09,256:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:09,257:INFO:Creating metrics dataframe
2024-07-17 17:42:09,276:INFO:Initializing Ada Boost Classifier
2024-07-17 17:42:09,277:INFO:Total runtime is 0.2136117418607076 minutes
2024-07-17 17:42:09,293:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:09,295:INFO:Initializing create_model()
2024-07-17 17:42:09,295:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:09,296:INFO:Checking exceptions
2024-07-17 17:42:09,296:INFO:Importing libraries
2024-07-17 17:42:09,296:INFO:Copying training dataset
2024-07-17 17:42:09,379:INFO:Defining folds
2024-07-17 17:42:09,380:INFO:Declaring metric variables
2024-07-17 17:42:09,387:INFO:Importing untrained model
2024-07-17 17:42:09,394:INFO:Ada Boost Classifier Imported successfully
2024-07-17 17:42:09,406:INFO:Starting cross validation
2024-07-17 17:42:09,408:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:09,478:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:09,488:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:09,499:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:09,522:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:09,530:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:09,531:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:09,547:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:09,603:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:10,576:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,578:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,596:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,597:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,618:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,620:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,641:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,683:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,693:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,714:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,725:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:10,742:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,744:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-17 17:42:10,792:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,807:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,823:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,823:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,841:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,859:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,941:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,949:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,954:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,965:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,970:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:10,980:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:11,858:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:11,870:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:11,882:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:11,951:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:11,963:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:11,975:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:12,003:INFO:Calculating mean and std
2024-07-17 17:42:12,007:INFO:Creating metrics dataframe
2024-07-17 17:42:12,012:INFO:Uploading results into container
2024-07-17 17:42:12,013:INFO:Uploading model into container now
2024-07-17 17:42:12,014:INFO:_master_model_container: 9
2024-07-17 17:42:12,014:INFO:_display_container: 2
2024-07-17 17:42:12,015:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-07-17 17:42:12,015:INFO:create_model() successfully completed......................................
2024-07-17 17:42:12,327:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:12,328:INFO:Creating metrics dataframe
2024-07-17 17:42:12,357:INFO:Initializing Gradient Boosting Classifier
2024-07-17 17:42:12,358:INFO:Total runtime is 0.2649566650390625 minutes
2024-07-17 17:42:12,376:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:12,378:INFO:Initializing create_model()
2024-07-17 17:42:12,379:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:12,380:INFO:Checking exceptions
2024-07-17 17:42:12,381:INFO:Importing libraries
2024-07-17 17:42:12,381:INFO:Copying training dataset
2024-07-17 17:42:12,498:INFO:Defining folds
2024-07-17 17:42:12,499:INFO:Declaring metric variables
2024-07-17 17:42:12,509:INFO:Importing untrained model
2024-07-17 17:42:12,521:INFO:Gradient Boosting Classifier Imported successfully
2024-07-17 17:42:12,541:INFO:Starting cross validation
2024-07-17 17:42:12,544:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:16,138:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,140:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,146:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,147:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,153:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,155:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,156:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,159:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,163:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,167:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,171:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,176:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,301:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,303:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,310:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,310:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,317:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,486:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,491:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,495:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,685:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,689:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:16,693:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:17,576:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:17,581:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:17,586:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,025:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,030:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,034:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,052:INFO:Calculating mean and std
2024-07-17 17:42:18,053:INFO:Creating metrics dataframe
2024-07-17 17:42:18,056:INFO:Uploading results into container
2024-07-17 17:42:18,056:INFO:Uploading model into container now
2024-07-17 17:42:18,057:INFO:_master_model_container: 10
2024-07-17 17:42:18,057:INFO:_display_container: 2
2024-07-17 17:42:18,057:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-07-17 17:42:18,057:INFO:create_model() successfully completed......................................
2024-07-17 17:42:18,204:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:18,204:INFO:Creating metrics dataframe
2024-07-17 17:42:18,217:INFO:Initializing Linear Discriminant Analysis
2024-07-17 17:42:18,217:INFO:Total runtime is 0.36260306437810264 minutes
2024-07-17 17:42:18,224:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:18,225:INFO:Initializing create_model()
2024-07-17 17:42:18,225:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:18,225:INFO:Checking exceptions
2024-07-17 17:42:18,225:INFO:Importing libraries
2024-07-17 17:42:18,225:INFO:Copying training dataset
2024-07-17 17:42:18,244:INFO:Defining folds
2024-07-17 17:42:18,244:INFO:Declaring metric variables
2024-07-17 17:42:18,254:INFO:Importing untrained model
2024-07-17 17:42:18,259:INFO:Linear Discriminant Analysis Imported successfully
2024-07-17 17:42:18,269:INFO:Starting cross validation
2024-07-17 17:42:18,271:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:18,363:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,368:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,371:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,377:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,379:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,381:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,383:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,387:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,390:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,390:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,393:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,394:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,397:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,402:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,405:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,407:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,410:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,412:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,414:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,414:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,434:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,439:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,443:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,454:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,460:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,461:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,464:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,467:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,468:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:18,485:INFO:Calculating mean and std
2024-07-17 17:42:18,486:INFO:Creating metrics dataframe
2024-07-17 17:42:18,489:INFO:Uploading results into container
2024-07-17 17:42:18,490:INFO:Uploading model into container now
2024-07-17 17:42:18,490:INFO:_master_model_container: 11
2024-07-17 17:42:18,490:INFO:_display_container: 2
2024-07-17 17:42:18,490:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-07-17 17:42:18,491:INFO:create_model() successfully completed......................................
2024-07-17 17:42:18,607:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:18,608:INFO:Creating metrics dataframe
2024-07-17 17:42:18,624:INFO:Initializing Extra Trees Classifier
2024-07-17 17:42:18,624:INFO:Total runtime is 0.36938910086949667 minutes
2024-07-17 17:42:18,629:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:18,630:INFO:Initializing create_model()
2024-07-17 17:42:18,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:18,630:INFO:Checking exceptions
2024-07-17 17:42:18,630:INFO:Importing libraries
2024-07-17 17:42:18,630:INFO:Copying training dataset
2024-07-17 17:42:18,648:INFO:Defining folds
2024-07-17 17:42:18,649:INFO:Declaring metric variables
2024-07-17 17:42:18,653:INFO:Importing untrained model
2024-07-17 17:42:18,657:INFO:Extra Trees Classifier Imported successfully
2024-07-17 17:42:18,667:INFO:Starting cross validation
2024-07-17 17:42:18,669:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:19,680:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,688:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,689:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,696:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,699:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,701:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,702:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,706:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,715:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,716:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,721:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,725:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,726:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,731:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,733:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,735:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,738:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,742:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,744:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,747:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,752:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:19,752:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:20,167:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:20,174:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:20,181:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:20,193:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:20,199:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:20,205:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:20,225:INFO:Calculating mean and std
2024-07-17 17:42:20,227:INFO:Creating metrics dataframe
2024-07-17 17:42:20,230:INFO:Uploading results into container
2024-07-17 17:42:20,230:INFO:Uploading model into container now
2024-07-17 17:42:20,232:INFO:_master_model_container: 12
2024-07-17 17:42:20,232:INFO:_display_container: 2
2024-07-17 17:42:20,233:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-07-17 17:42:20,233:INFO:create_model() successfully completed......................................
2024-07-17 17:42:20,366:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:20,367:INFO:Creating metrics dataframe
2024-07-17 17:42:20,384:INFO:Initializing Light Gradient Boosting Machine
2024-07-17 17:42:20,385:INFO:Total runtime is 0.39873191515604656 minutes
2024-07-17 17:42:20,390:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:20,390:INFO:Initializing create_model()
2024-07-17 17:42:20,390:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:20,391:INFO:Checking exceptions
2024-07-17 17:42:20,391:INFO:Importing libraries
2024-07-17 17:42:20,391:INFO:Copying training dataset
2024-07-17 17:42:20,406:INFO:Defining folds
2024-07-17 17:42:20,406:INFO:Declaring metric variables
2024-07-17 17:42:20,410:INFO:Importing untrained model
2024-07-17 17:42:20,419:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-17 17:42:20,426:INFO:Starting cross validation
2024-07-17 17:42:20,427:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:21,651:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,659:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,664:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,666:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,667:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,672:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,676:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,679:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,686:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,733:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,749:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,798:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,806:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,808:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,815:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,815:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,821:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,823:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,828:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,835:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,901:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,909:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:21,917:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:22,232:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:22,240:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:22,249:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:22,250:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:22,259:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:22,268:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:22,290:INFO:Calculating mean and std
2024-07-17 17:42:22,292:INFO:Creating metrics dataframe
2024-07-17 17:42:22,296:INFO:Uploading results into container
2024-07-17 17:42:22,297:INFO:Uploading model into container now
2024-07-17 17:42:22,298:INFO:_master_model_container: 13
2024-07-17 17:42:22,298:INFO:_display_container: 2
2024-07-17 17:42:22,299:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-07-17 17:42:22,299:INFO:create_model() successfully completed......................................
2024-07-17 17:42:22,417:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:22,417:INFO:Creating metrics dataframe
2024-07-17 17:42:22,431:INFO:Initializing CatBoost Classifier
2024-07-17 17:42:22,432:INFO:Total runtime is 0.43283708492914835 minutes
2024-07-17 17:42:22,436:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:22,436:INFO:Initializing create_model()
2024-07-17 17:42:22,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:22,437:INFO:Checking exceptions
2024-07-17 17:42:22,437:INFO:Importing libraries
2024-07-17 17:42:22,437:INFO:Copying training dataset
2024-07-17 17:42:22,473:INFO:Defining folds
2024-07-17 17:42:22,473:INFO:Declaring metric variables
2024-07-17 17:42:22,477:INFO:Importing untrained model
2024-07-17 17:42:22,482:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:42:22,491:INFO:Starting cross validation
2024-07-17 17:42:22,493:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:46,246:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:46,252:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:46,269:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:46,341:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:46,348:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:46,356:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,335:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,339:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,343:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,759:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,763:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,767:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,773:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,773:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,779:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,780:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,782:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,788:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,838:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,846:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,854:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,930:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,939:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:47,949:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:53,539:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:53,544:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:53,547:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:53,555:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:53,558:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:53,563:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:53,581:INFO:Calculating mean and std
2024-07-17 17:42:53,584:INFO:Creating metrics dataframe
2024-07-17 17:42:53,587:INFO:Uploading results into container
2024-07-17 17:42:53,588:INFO:Uploading model into container now
2024-07-17 17:42:53,589:INFO:_master_model_container: 14
2024-07-17 17:42:53,589:INFO:_display_container: 2
2024-07-17 17:42:53,589:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C336C210>
2024-07-17 17:42:53,590:INFO:create_model() successfully completed......................................
2024-07-17 17:42:53,763:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:53,763:INFO:Creating metrics dataframe
2024-07-17 17:42:53,787:INFO:Initializing Dummy Classifier
2024-07-17 17:42:53,788:INFO:Total runtime is 0.955447256565094 minutes
2024-07-17 17:42:53,794:INFO:SubProcess create_model() called ==================================
2024-07-17 17:42:53,796:INFO:Initializing create_model()
2024-07-17 17:42:53,796:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C374B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:53,797:INFO:Checking exceptions
2024-07-17 17:42:53,798:INFO:Importing libraries
2024-07-17 17:42:53,798:INFO:Copying training dataset
2024-07-17 17:42:53,874:INFO:Defining folds
2024-07-17 17:42:53,875:INFO:Declaring metric variables
2024-07-17 17:42:53,882:INFO:Importing untrained model
2024-07-17 17:42:53,898:INFO:Dummy Classifier Imported successfully
2024-07-17 17:42:53,911:INFO:Starting cross validation
2024-07-17 17:42:53,913:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:42:54,017:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,028:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,030:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,037:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,042:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,043:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,044:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,047:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,049:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,056:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,057:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,060:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,061:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,064:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,068:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,071:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,073:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,075:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,077:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,084:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,090:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,090:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,093:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,097:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,104:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,106:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,108:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,113:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,116:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,120:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,121:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,126:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,135:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,145:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,149:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,152:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,160:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,160:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,164:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-17 17:42:54,168:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:42:54,205:INFO:Calculating mean and std
2024-07-17 17:42:54,207:INFO:Creating metrics dataframe
2024-07-17 17:42:54,211:INFO:Uploading results into container
2024-07-17 17:42:54,212:INFO:Uploading model into container now
2024-07-17 17:42:54,212:INFO:_master_model_container: 15
2024-07-17 17:42:54,213:INFO:_display_container: 2
2024-07-17 17:42:54,213:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-07-17 17:42:54,213:INFO:create_model() successfully completed......................................
2024-07-17 17:42:54,363:INFO:SubProcess create_model() end ==================================
2024-07-17 17:42:54,363:INFO:Creating metrics dataframe
2024-07-17 17:42:54,405:INFO:Initializing create_model()
2024-07-17 17:42:54,406:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C336C210>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:42:54,406:INFO:Checking exceptions
2024-07-17 17:42:54,416:INFO:Importing libraries
2024-07-17 17:42:54,417:INFO:Copying training dataset
2024-07-17 17:42:54,489:INFO:Defining folds
2024-07-17 17:42:54,489:INFO:Declaring metric variables
2024-07-17 17:42:54,490:INFO:Importing untrained model
2024-07-17 17:42:54,491:INFO:Declaring custom model
2024-07-17 17:42:54,493:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:42:54,497:INFO:Cross validation set to False
2024-07-17 17:42:54,498:INFO:Fitting Model
2024-07-17 17:43:05,542:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C3454210>
2024-07-17 17:43:05,542:INFO:create_model() successfully completed......................................
2024-07-17 17:43:05,680:INFO:_master_model_container: 15
2024-07-17 17:43:05,681:INFO:_display_container: 2
2024-07-17 17:43:05,681:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C3454210>
2024-07-17 17:43:05,681:INFO:compare_models() successfully completed......................................
2024-07-17 17:43:05,681:INFO:Initializing evaluate_model()
2024-07-17 17:43:05,681:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-07-17 17:43:05,700:INFO:Initializing plot_model()
2024-07-17 17:43:05,700:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-07-17 17:43:05,700:INFO:Checking exceptions
2024-07-17 17:43:05,706:INFO:Preloading libraries
2024-07-17 17:43:05,710:INFO:Copying training dataset
2024-07-17 17:43:05,710:INFO:Plot type: pipeline
2024-07-17 17:43:06,013:INFO:Visual Rendered Successfully
2024-07-17 17:43:06,133:INFO:plot_model() successfully completed......................................
2024-07-17 17:43:06,139:INFO:Initializing predict_model()
2024-07-17 17:43:06,139:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000166C3349080>)
2024-07-17 17:43:06,140:INFO:Checking exceptions
2024-07-17 17:43:06,140:INFO:Preloading libraries
2024-07-17 17:43:06,267:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:43:06,277:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:43:06,288:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:43:06,426:INFO:Initializing predict_model()
2024-07-17 17:43:06,426:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000166C332BF60>)
2024-07-17 17:43:06,426:INFO:Checking exceptions
2024-07-17 17:43:06,426:INFO:Preloading libraries
2024-07-17 17:43:06,429:INFO:Set up data.
2024-07-17 17:43:06,451:INFO:Set up index.
2024-07-17 17:43:56,912:INFO:Initializing plot_model()
2024-07-17 17:43:56,913:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 17:43:56,913:INFO:Checking exceptions
2024-07-17 17:43:56,924:INFO:Preloading libraries
2024-07-17 17:43:56,929:INFO:Copying training dataset
2024-07-17 17:43:56,929:INFO:Plot type: confusion_matrix
2024-07-17 17:43:57,158:INFO:Fitting Model
2024-07-17 17:43:57,159:INFO:Scoring test/hold-out set
2024-07-17 17:43:57,420:INFO:Visual Rendered Successfully
2024-07-17 17:43:57,592:INFO:plot_model() successfully completed......................................
2024-07-17 17:44:13,484:INFO:Initializing plot_model()
2024-07-17 17:44:13,485:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 17:44:13,485:INFO:Checking exceptions
2024-07-17 17:44:13,502:INFO:Preloading libraries
2024-07-17 17:44:13,506:INFO:Copying training dataset
2024-07-17 17:44:13,506:INFO:Plot type: auc
2024-07-17 17:44:13,715:INFO:Fitting Model
2024-07-17 17:44:13,716:INFO:Scoring test/hold-out set
2024-07-17 17:44:14,044:INFO:Visual Rendered Successfully
2024-07-17 17:44:14,162:INFO:plot_model() successfully completed......................................
2024-07-17 17:44:24,100:INFO:Initializing plot_model()
2024-07-17 17:44:24,101:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 17:44:24,101:INFO:Checking exceptions
2024-07-17 17:44:24,112:INFO:Preloading libraries
2024-07-17 17:44:24,116:INFO:Copying training dataset
2024-07-17 17:44:24,117:INFO:Plot type: feature
2024-07-17 17:44:24,117:WARNING:No coef_ found. Trying feature_importances_
2024-07-17 17:44:24,453:INFO:Visual Rendered Successfully
2024-07-17 17:44:24,561:INFO:plot_model() successfully completed......................................
2024-07-17 17:44:36,811:INFO:Initializing create_model()
2024-07-17 17:44:36,812:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=catboost, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:44:36,812:INFO:Checking exceptions
2024-07-17 17:44:36,838:INFO:Importing libraries
2024-07-17 17:44:36,838:INFO:Copying training dataset
2024-07-17 17:44:36,853:INFO:Defining folds
2024-07-17 17:44:36,853:INFO:Declaring metric variables
2024-07-17 17:44:36,857:INFO:Importing untrained model
2024-07-17 17:44:36,860:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:44:36,868:INFO:Starting cross validation
2024-07-17 17:44:36,869:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:44:58,242:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:44:58,250:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:44:58,256:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,427:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,433:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,438:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,485:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,492:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,498:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,776:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,784:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,792:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,796:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,808:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,816:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,833:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,840:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,848:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,857:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,865:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,872:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,912:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,919:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:01,927:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:06,910:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:06,918:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:06,927:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:07,608:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:07,613:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:07,617:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:45:07,627:INFO:Calculating mean and std
2024-07-17 17:45:07,629:INFO:Creating metrics dataframe
2024-07-17 17:45:07,635:INFO:Finalizing model
2024-07-17 17:45:16,893:INFO:Uploading results into container
2024-07-17 17:45:16,896:INFO:Uploading model into container now
2024-07-17 17:45:16,943:INFO:_master_model_container: 16
2024-07-17 17:45:16,944:INFO:_display_container: 4
2024-07-17 17:45:16,945:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>
2024-07-17 17:45:16,945:INFO:create_model() successfully completed......................................
2024-07-17 17:45:31,364:INFO:Initializing tune_model()
2024-07-17 17:45:31,364:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-07-17 17:45:31,364:INFO:Checking exceptions
2024-07-17 17:45:31,386:INFO:Copying training dataset
2024-07-17 17:45:31,400:INFO:Checking base model
2024-07-17 17:45:31,400:INFO:Base model : CatBoost Classifier
2024-07-17 17:45:31,405:INFO:Declaring metric variables
2024-07-17 17:45:31,409:INFO:Defining Hyperparameters
2024-07-17 17:45:31,532:INFO:Tuning with n_jobs=-1
2024-07-17 17:45:31,532:INFO:Initializing RandomizedSearchCV
2024-07-17 17:46:05,154:INFO:best_params: {'actual_estimator__random_strength': 0.7, 'actual_estimator__n_estimators': 250, 'actual_estimator__l2_leaf_reg': 50, 'actual_estimator__eta': 0.15, 'actual_estimator__depth': 3}
2024-07-17 17:46:05,155:INFO:Hyperparameter search completed
2024-07-17 17:46:05,155:INFO:SubProcess create_model() called ==================================
2024-07-17 17:46:05,156:INFO:Initializing create_model()
2024-07-17 17:46:05,157:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C38D3710>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C3356ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'random_strength': 0.7, 'n_estimators': 250, 'l2_leaf_reg': 50, 'eta': 0.15, 'depth': 3})
2024-07-17 17:46:05,157:INFO:Checking exceptions
2024-07-17 17:46:05,158:INFO:Importing libraries
2024-07-17 17:46:05,158:INFO:Copying training dataset
2024-07-17 17:46:05,177:INFO:Defining folds
2024-07-17 17:46:05,178:INFO:Declaring metric variables
2024-07-17 17:46:05,182:INFO:Importing untrained model
2024-07-17 17:46:05,182:INFO:Declaring custom model
2024-07-17 17:46:05,187:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:46:05,201:INFO:Starting cross validation
2024-07-17 17:46:05,203:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:46:07,067:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:07,079:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:07,097:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:08,517:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:08,535:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:08,547:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:08,702:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:08,714:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:08,736:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,194:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,206:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,210:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,221:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,222:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,235:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,443:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,457:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,473:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,515:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,529:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,541:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,602:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,617:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:09,630:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:10,051:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:10,068:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:10,083:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:10,784:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:10,795:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:10,803:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:10,827:INFO:Calculating mean and std
2024-07-17 17:46:10,829:INFO:Creating metrics dataframe
2024-07-17 17:46:10,840:INFO:Finalizing model
2024-07-17 17:46:13,535:INFO:Uploading results into container
2024-07-17 17:46:13,537:INFO:Uploading model into container now
2024-07-17 17:46:13,539:INFO:_master_model_container: 17
2024-07-17 17:46:13,539:INFO:_display_container: 5
2024-07-17 17:46:13,540:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C36B8690>
2024-07-17 17:46:13,540:INFO:create_model() successfully completed......................................
2024-07-17 17:46:13,764:INFO:SubProcess create_model() end ==================================
2024-07-17 17:46:13,765:INFO:choose_better activated
2024-07-17 17:46:13,774:INFO:SubProcess create_model() called ==================================
2024-07-17 17:46:13,776:INFO:Initializing create_model()
2024-07-17 17:46:13,776:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:46:13,777:INFO:Checking exceptions
2024-07-17 17:46:13,782:INFO:Importing libraries
2024-07-17 17:46:13,784:INFO:Copying training dataset
2024-07-17 17:46:13,845:INFO:Defining folds
2024-07-17 17:46:13,846:INFO:Declaring metric variables
2024-07-17 17:46:13,846:INFO:Importing untrained model
2024-07-17 17:46:13,846:INFO:Declaring custom model
2024-07-17 17:46:13,847:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:46:13,848:INFO:Starting cross validation
2024-07-17 17:46:13,850:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:46:33,111:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:33,123:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:33,147:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:34,253:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:34,275:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:34,290:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:36,314:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:36,358:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:36,415:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:36,577:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:36,611:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:36,635:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:37,892:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:37,903:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:37,920:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:37,926:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:37,943:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:37,953:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:38,656:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:38,680:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:38,705:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:38,750:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:38,775:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:38,801:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:44,790:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:44,801:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:44,811:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:45,093:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:45,100:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:45,106:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:46:45,120:INFO:Calculating mean and std
2024-07-17 17:46:45,121:INFO:Creating metrics dataframe
2024-07-17 17:46:45,126:INFO:Finalizing model
2024-07-17 17:46:50,542:INFO:Uploading results into container
2024-07-17 17:46:50,542:INFO:Uploading model into container now
2024-07-17 17:46:50,543:INFO:_master_model_container: 18
2024-07-17 17:46:50,543:INFO:_display_container: 6
2024-07-17 17:46:50,543:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB910>
2024-07-17 17:46:50,543:INFO:create_model() successfully completed......................................
2024-07-17 17:46:50,655:INFO:SubProcess create_model() end ==================================
2024-07-17 17:46:50,655:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB910> result for Accuracy is 0.7874
2024-07-17 17:46:50,656:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C36B8690> result for Accuracy is 0.7791
2024-07-17 17:46:50,656:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB910> is best model
2024-07-17 17:46:50,656:INFO:choose_better completed
2024-07-17 17:46:50,656:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-07-17 17:46:50,676:INFO:_master_model_container: 18
2024-07-17 17:46:50,677:INFO:_display_container: 5
2024-07-17 17:46:50,677:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB910>
2024-07-17 17:46:50,678:INFO:tune_model() successfully completed......................................
2024-07-17 17:47:18,005:INFO:Initializing tune_model()
2024-07-17 17:47:18,006:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, fold=None, round=4, n_iter=10, custom_grid={'iterations': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x00000166C3455C50>, 'learning_rate': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x00000166C376F590>, 'depth': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x00000166C345CB90>, 'l2_leaf_reg': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x00000166C345E550>, 'border_count': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x00000166C345EE90>, 'scale_pos_weight': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x00000166C345D750>}, optimize=F1, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-07-17 17:47:18,006:INFO:Checking exceptions
2024-07-17 17:47:18,053:INFO:Copying training dataset
2024-07-17 17:47:18,070:INFO:Checking base model
2024-07-17 17:47:18,070:INFO:Base model : CatBoost Classifier
2024-07-17 17:47:18,075:INFO:Declaring metric variables
2024-07-17 17:47:18,079:INFO:Defining Hyperparameters
2024-07-17 17:47:18,203:INFO:custom_grid: {'actual_estimator__iterations': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x00000166C3455C50>, 'actual_estimator__learning_rate': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x00000166C376F590>, 'actual_estimator__depth': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x00000166C345CB90>, 'actual_estimator__l2_leaf_reg': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x00000166C345E550>, 'actual_estimator__border_count': <scipy.stats._distn_infrastructure.rv_discrete_frozen object at 0x00000166C345EE90>, 'actual_estimator__scale_pos_weight': <scipy.stats._distn_infrastructure.rv_continuous_frozen object at 0x00000166C345D750>}
2024-07-17 17:47:18,203:INFO:Tuning with n_jobs=-1
2024-07-17 17:47:18,203:INFO:Initializing RandomizedSearchCV
2024-07-17 17:47:21,635:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:21,845:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:21,921:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:21,949:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:21,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:22,062:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:22,064:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:22,064:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:23,988:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:24,546:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:25,034:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:25,111:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:25,201:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:25,222:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:25,321:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:25,337:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:25,919:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:27,631:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:28,626:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:28,763:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:30,336:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:32,698:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:32,733:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:33,993:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:34,544:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:34,995:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:36,654:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:37,427:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:37,491:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:37,495:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:37,542:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:37,567:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:37,909:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:38,971:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:39,184:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:39,306:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:39,439:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:39,582:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:39,699:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:39,720:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:40,334:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:40,694:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:40,995:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:42,288:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:42,304:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:42,412:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:42,502:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:42,639:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:42,836:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:47:43,720:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:33,706:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:38,754:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:40,072:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:43,049:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:49,658:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:50,003:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:52,047:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:48:52,637:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:01,956:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:09,191:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:14,492:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:14,955:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:15,171:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:15,415:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:19,223:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:20,714:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:25,435:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:25,741:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:27,033:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:27,958:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:34,828:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:37,089:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:37,692:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:37,804:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:39,003:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:42,733:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:45,765:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:48,270:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:54,168:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:49:58,119:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:16,220:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:17,382:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:22,123:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:26,505:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:32,076:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:33,145:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:33,161:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:35,674:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:39,153:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:42,387:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:43,214:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:44,279:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:46,252:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:48,036:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:50,719:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:50,901:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:51,861:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:52,109:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:52,453:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:53,124:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:53,132:INFO:best_params: {'actual_estimator__border_count': 246, 'actual_estimator__depth': 5, 'actual_estimator__iterations': 196, 'actual_estimator__l2_leaf_reg': 6.796942970226101, 'actual_estimator__learning_rate': 0.05198522878911536, 'actual_estimator__scale_pos_weight': 1.302035113322407}
2024-07-17 17:50:53,134:INFO:Hyperparameter search completed
2024-07-17 17:50:53,134:INFO:SubProcess create_model() called ==================================
2024-07-17 17:50:53,135:INFO:Initializing create_model()
2024-07-17 17:50:53,135:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166BEEA3750>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C3356ED0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'border_count': 246, 'depth': 5, 'iterations': 196, 'l2_leaf_reg': 6.796942970226101, 'learning_rate': 0.05198522878911536, 'scale_pos_weight': 1.302035113322407})
2024-07-17 17:50:53,135:INFO:Checking exceptions
2024-07-17 17:50:53,135:INFO:Importing libraries
2024-07-17 17:50:53,136:INFO:Copying training dataset
2024-07-17 17:50:53,151:INFO:Defining folds
2024-07-17 17:50:53,152:INFO:Declaring metric variables
2024-07-17 17:50:53,155:INFO:Importing untrained model
2024-07-17 17:50:53,156:INFO:Declaring custom model
2024-07-17 17:50:53,160:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:50:53,168:INFO:Starting cross validation
2024-07-17 17:50:53,169:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:50:55,382:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,389:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,396:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,487:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,498:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,507:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,844:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,852:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:55,859:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,002:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,011:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,016:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,020:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,023:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,031:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,196:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,203:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,211:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,272:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,279:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,287:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,294:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,305:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,313:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,962:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,967:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,972:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,983:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,987:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:56,992:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:50:57,002:INFO:Calculating mean and std
2024-07-17 17:50:57,003:INFO:Creating metrics dataframe
2024-07-17 17:50:57,009:INFO:Finalizing model
2024-07-17 17:50:58,299:INFO:Uploading results into container
2024-07-17 17:50:58,301:INFO:Uploading model into container now
2024-07-17 17:50:58,301:INFO:_master_model_container: 19
2024-07-17 17:50:58,302:INFO:_display_container: 6
2024-07-17 17:50:58,302:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C346CD10>
2024-07-17 17:50:58,302:INFO:create_model() successfully completed......................................
2024-07-17 17:50:58,428:INFO:SubProcess create_model() end ==================================
2024-07-17 17:50:58,428:INFO:choose_better activated
2024-07-17 17:50:58,432:INFO:SubProcess create_model() called ==================================
2024-07-17 17:50:58,432:INFO:Initializing create_model()
2024-07-17 17:50:58,433:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:50:58,433:INFO:Checking exceptions
2024-07-17 17:50:58,435:INFO:Importing libraries
2024-07-17 17:50:58,435:INFO:Copying training dataset
2024-07-17 17:50:58,452:INFO:Defining folds
2024-07-17 17:50:58,452:INFO:Declaring metric variables
2024-07-17 17:50:58,452:INFO:Importing untrained model
2024-07-17 17:50:58,452:INFO:Declaring custom model
2024-07-17 17:50:58,453:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:50:58,453:INFO:Starting cross validation
2024-07-17 17:50:58,454:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:51:22,363:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,369:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,377:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,522:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,526:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,530:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,596:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,604:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,682:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,691:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,700:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,703:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,709:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,710:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,717:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,717:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,725:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,796:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,804:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,812:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,833:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,840:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:22,846:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:30,333:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:30,349:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:30,367:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:30,568:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:30,579:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:30,591:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:51:30,616:INFO:Calculating mean and std
2024-07-17 17:51:30,617:INFO:Creating metrics dataframe
2024-07-17 17:51:30,621:INFO:Finalizing model
2024-07-17 17:51:40,366:INFO:Uploading results into container
2024-07-17 17:51:40,367:INFO:Uploading model into container now
2024-07-17 17:51:40,367:INFO:_master_model_container: 20
2024-07-17 17:51:40,367:INFO:_display_container: 7
2024-07-17 17:51:40,367:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB750>
2024-07-17 17:51:40,367:INFO:create_model() successfully completed......................................
2024-07-17 17:51:40,487:INFO:SubProcess create_model() end ==================================
2024-07-17 17:51:40,487:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB750> result for F1 is 0.787
2024-07-17 17:51:40,487:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C346CD10> result for F1 is 0.7849
2024-07-17 17:51:40,487:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB750> is best model
2024-07-17 17:51:40,487:INFO:choose_better completed
2024-07-17 17:51:40,487:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-07-17 17:51:40,507:INFO:_master_model_container: 20
2024-07-17 17:51:40,507:INFO:_display_container: 6
2024-07-17 17:51:40,507:INFO:<catboost.core.CatBoostClassifier object at 0x00000166C38AB750>
2024-07-17 17:51:40,507:INFO:tune_model() successfully completed......................................
2024-07-17 17:53:03,961:INFO:Initializing interpret_model()
2024-07-17 17:53:03,962:INFO:interpret_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, plot=summary, feature=None, observation=None, use_train_data=False, X_new_sample=None, y_new_sample=None, save=False, kwargs={})
2024-07-17 17:53:03,962:INFO:Checking exceptions
2024-07-17 17:53:03,962:INFO:Soft dependency imported: shap: 0.46.0
2024-07-17 17:53:14,513:INFO:plot type: summary
2024-07-17 17:53:14,514:INFO:Creating TreeExplainer
2024-07-17 17:53:14,907:INFO:Compiling shap values
2024-07-17 17:53:16,799:INFO:Visual Rendered Successfully
2024-07-17 17:53:16,799:INFO:interpret_model() successfully completed......................................
2024-07-17 17:54:01,437:INFO:Initializing interpret_model()
2024-07-17 17:54:01,438:INFO:interpret_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, plot=reason, feature=None, observation=1, use_train_data=False, X_new_sample=None, y_new_sample=None, save=False, kwargs={})
2024-07-17 17:54:01,438:INFO:Checking exceptions
2024-07-17 17:54:01,438:INFO:Soft dependency imported: shap: 0.46.0
2024-07-17 17:54:01,529:INFO:plot type: reason
2024-07-17 17:54:01,529:INFO:model type detected: type 2
2024-07-17 17:54:01,529:INFO:Creating TreeExplainer
2024-07-17 17:54:01,904:INFO:Compiling shap values
2024-07-17 17:54:03,034:INFO:Visual Rendered Successfully
2024-07-17 17:54:03,034:INFO:interpret_model() successfully completed......................................
2024-07-17 17:54:36,812:INFO:Initializing plot_model()
2024-07-17 17:54:36,813:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, plot=calibration, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 17:54:36,813:INFO:Checking exceptions
2024-07-17 17:54:36,831:INFO:Preloading libraries
2024-07-17 17:54:36,839:INFO:Copying training dataset
2024-07-17 17:54:36,839:INFO:Plot type: calibration
2024-07-17 17:54:36,854:INFO:Scoring test/hold-out set
2024-07-17 17:54:37,265:INFO:Visual Rendered Successfully
2024-07-17 17:54:37,386:INFO:plot_model() successfully completed......................................
2024-07-17 17:55:06,654:INFO:Initializing calibrate_model()
2024-07-17 17:55:06,655:INFO:calibrate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>, method=sigmoid, calibrate_fold=5, fold=None, round=4, fit_kwargs=None, groups=None, verbose=True, return_train_score=False)
2024-07-17 17:55:06,656:INFO:Checking exceptions
2024-07-17 17:55:06,662:INFO:Preloading libraries
2024-07-17 17:55:06,662:INFO:Preparing display monitor
2024-07-17 17:55:06,687:INFO:Getting model name
2024-07-17 17:55:06,687:INFO:Base model : CatBoost Classifier
2024-07-17 17:55:06,695:INFO:Importing untrained CalibratedClassifierCV
2024-07-17 17:55:06,695:INFO:SubProcess create_model() called ==================================
2024-07-17 17:55:06,695:INFO:Initializing create_model()
2024-07-17 17:55:06,695:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=<catboost.core.CatBoostClassifier object at 0x00000166C0BAC450>,
                       method='sigmoid', n_jobs=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000166C346EA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-17 17:55:06,696:INFO:Checking exceptions
2024-07-17 17:55:06,696:INFO:Importing libraries
2024-07-17 17:55:06,696:INFO:Copying training dataset
2024-07-17 17:55:06,710:INFO:Defining folds
2024-07-17 17:55:06,710:INFO:Declaring metric variables
2024-07-17 17:55:06,713:INFO:Importing untrained model
2024-07-17 17:55:06,713:INFO:Declaring custom model
2024-07-17 17:55:06,719:INFO:CatBoost Classifier Imported successfully
2024-07-17 17:55:06,729:INFO:Starting cross validation
2024-07-17 17:55:06,730:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-17 17:56:56,665:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:56,683:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:56,695:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:57,440:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:57,468:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:57,481:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:58,534:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:58,547:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:56:58,559:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:01,661:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:01,692:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:01,715:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:03,671:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:03,701:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:03,736:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:05,138:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:05,161:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:05,186:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:05,267:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:05,293:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:05,317:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:06,044:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:06,051:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:06,058:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:40,073:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:40,078:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:40,083:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:40,139:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:40,143:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:40,148:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Low') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-17 17:57:40,158:INFO:Calculating mean and std
2024-07-17 17:57:40,160:INFO:Creating metrics dataframe
2024-07-17 17:57:40,166:INFO:Finalizing model
2024-07-17 17:58:17,764:INFO:Uploading results into container
2024-07-17 17:58:17,766:INFO:Uploading model into container now
2024-07-17 17:58:17,767:INFO:_master_model_container: 21
2024-07-17 17:58:17,767:INFO:_display_container: 7
2024-07-17 17:58:17,768:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=<catboost.core.CatBoostClassifier object at 0x00000166C38BBFD0>,
                       method='sigmoid', n_jobs=None)
2024-07-17 17:58:17,768:INFO:create_model() successfully completed......................................
2024-07-17 17:58:17,956:INFO:SubProcess create_model() end ==================================
2024-07-17 17:58:17,982:INFO:_master_model_container: 21
2024-07-17 17:58:17,982:INFO:_display_container: 7
2024-07-17 17:58:17,983:INFO:CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=<catboost.core.CatBoostClassifier object at 0x00000166C38BBFD0>,
                       method='sigmoid', n_jobs=None)
2024-07-17 17:58:17,983:INFO:calibrate_model() successfully completed......................................
2024-07-17 17:59:19,852:INFO:Initializing plot_model()
2024-07-17 17:59:19,852:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000166C2304690>, estimator=CalibratedClassifierCV(cv=5, ensemble=True,
                       estimator=<catboost.core.CatBoostClassifier object at 0x00000166C38BBFD0>,
                       method='sigmoid', n_jobs=None), plot=calibration, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-17 17:59:19,853:INFO:Checking exceptions
2024-07-17 17:59:19,872:INFO:Preloading libraries
2024-07-17 17:59:19,894:INFO:Copying training dataset
2024-07-17 17:59:19,894:INFO:Plot type: calibration
2024-07-17 17:59:19,909:INFO:Scoring test/hold-out set
2024-07-17 17:59:20,349:INFO:Visual Rendered Successfully
2024-07-17 17:59:20,473:INFO:plot_model() successfully completed......................................
2024-07-17 18:01:29,950:INFO:Initializing save_model()
2024-07-17 18:01:29,951:INFO:save_model(model=<catboost.core.CatBoostClassifier object at 0x00000166C3454210>, model_name=my_first_best_pipeline_cboost, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\MTIDES\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['student_count',
                                             'awards_per_state_value',
                                             'awards_per_natl_value',
                                             'exp_award_value',
                                             'exp_award_state...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-17 18:01:29,951:INFO:Adding model into prep_pipe
2024-07-17 18:01:29,960:INFO:my_first_best_pipeline_cboost.pkl saved in current working directory
2024-07-17 18:01:29,973:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['student_count',
                                             'awards_per_state_value',
                                             'awards_per_natl_value',
                                             'exp_award_value',
                                             'exp_award_state_value',
                                             'exp_award_natl_value', 'ft_pct',
                                             '...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('trained_model',
                 <catboost.core.CatBoostClassifier object at 0x00000166C3454210>)],
         verbose=False)
2024-07-17 18:01:29,974:INFO:save_model() successfully completed......................................
2024-07-17 18:02:16,583:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_1623cf64063c4d39942645079a31ccf5
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,583:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_67895d8c1290498a8bc1e1836248866e_8b8732e8b8aa4abd92d703e7bd385e9e
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,583:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_980ab8a379054c05af34c7675e615321
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,584:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_771177712dcd430b9a6016cde2d0b72b_ab4bb1ecdefd4f34ab30eb7bc44e4b53
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,584:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_7457086e240f42e6b845ca9c2b026d07
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,584:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_09429569b4ff423b9fd507b44cc1363a_c181e08adc004258bdbf829c98430b71
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,584:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_721ba35ba7034f70b5e79b94a04953b0
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,584:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_68cfe8c748524495a3ac381d3a949283_4c30c99b96894cecb63a2991e24a8f42
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,584:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_5d2263118883439fa75079add12248bb
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_f1b69f1165bd45adb2a854fcf8796b42_e4a30e12b48f4907b62bd03def741dee
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_7671b911ac9040c38e2d75d380c0f7e4
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_ccf8c664be0d48b8ba91f4a7bc9709af_82f93304e38948bcb44eb74ff2d2be05
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_b75cc1cfccc443e58b13864bdd666127
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_9da4886ae7f64b2cb0364d0af6c321e2_cd0215a2d9744c45bcca17addf7f06cb
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_fcb7c97fb2014787a690d039cffc3565
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,585:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_3c38dd07abe943d5b97fe845d34dd8e8_9c2f2fbc57154e3e91a8832b7926e16c
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,586:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_c6eab37caf3442798b97bb622ffe41a8
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,586:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_2c0bebd729ae47b6aed592c7b290dc58_0bd95081be484df7b607de3068133ab1
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,586:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_96860f871f124497b5e3f10b22bca928
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,586:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_4f3d27fd0bd44c4c8e35034bc364e235_98e23a743da942629f590d445fc5b5d3
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,586:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_b7612ef282d348c89a16a5ac32e2cc45
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,586:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_0c2bf71a7ea64c12a197188ba4e22e4c_88edcb98753842759f2dc0ad3b672d4d
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_f94896baa0c940c88860f7f242af7dd1
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_d2c4bd60ba4e49da8efbb8f4012172ef_dbda591184ea473f81bc3f5544fd6a3f
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_54275e6ecfde493ba48a8b600da51b4f
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_15400c9ce4cf43828b08cf50925de4b4_626978dd12a649c7abfe59dc7f59aa0e
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_e8b0a2c2162d4b0ab1f9e26563bb8ba5
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_27f3cf3488aa4207a785b633e263ef77_47aaae7b42e1496189c63a05736f534e
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,587:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_81d24b7642e648789825025e27c21a4e
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,588:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_f14ba32caeb24cd6a98230518adb2b37_49866545e3cd46f4a7835d6d2614a486
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,588:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_10d566691c914cad940699fdb18e9232
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,588:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_3df3c74c4e5b4973a2c183d5e408946a_fb4ae410d28d4922943d2b6626159481
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,588:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_b3fb0206dbcf4ce18c108e010948676a
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,588:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_3368077e15b64407a128b57e9771b963_159b3d46b6fb436c83ccf24ee5eeae7f
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,588:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_bbf9d8c91a5b4781b73040c8954da117
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,589:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_e82ade2ffa2640d3a9baa78d84495f3f_284a03cef75d499480b0e79e4308ee71
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,589:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_614e807e7ebc46d687ca212a67e985be
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,589:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_63101b450e234aa9a3f7fe5183bf9348_70b41fc39f8c4b06930caf6c6a81f036
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,589:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_f74bd8e820d64695af8905b6de047a72
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_76b31a7cb29c427785ed0b2a9965c371_5d9fa1bc78144a31b7e66c39bc6a9c92
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_94ec75b2c36b41f6ac3e772837345888
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_d1f595ff93c14b32b6a6a234c4fedd74_997203b1cdcd4a459eedd41e02d1ea4a
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_86654ad26b9247b093a8d3f2637af3f6
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_66d39670e3b744818e8ffdc83e42dff6_925b265612644d548e01e383939d1e54
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,590:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_a8c4af6ff8b34bd6bd6df6800f33c304
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,591:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_08f0cc6d1b3f49b895c7c9bfcea0eb06_12b7bc1fc9f4436aaa79a48c473eadc8
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,591:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_d04353be54234e46865dfe7bd60903b4
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,592:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_a489a7d2e12f41d5862c475f6024b1df_6911fbae315449e89874f3871f17297b
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,592:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_d39ba3996c104f5a81078009d54f45b6
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,592:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_3d5a8d720fc647df998ad2699605142d_aed817613c614f73b6f1d0d81172dab9
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,595:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_c8ed836b1c9e486ab8025d264f367bbe
  warnings.warn("Failed to delete temporary folder: {}"

2024-07-17 18:02:16,595:WARNING:C:\Users\MTIDES\anaconda3\Lib\site-packages\joblib\_memmapping_reducer.py:598: UserWarning: Failed to delete temporary folder: C:\Users\MTIDES\AppData\Local\Temp\joblib_memmapping_folder_28304_39c0b01ccfc143af9a26ccfa9fdbaa7d_91f49e16a4e945c5b07de946be342bd5
  warnings.warn("Failed to delete temporary folder: {}"

